# Makefile.in generated by automake 1.10 from Makefile.am.
# test/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



pkgdatadir = $(datadir)/arageli
pkglibdir = $(libdir)/arageli
pkgincludedir = $(includedir)/arageli
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
check_PROGRAMS = test$(EXEEXT)
subdir = test
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/src/arageli/config.hpp
CONFIG_CLEAN_FILES =
am_test_OBJECTS = test-algebraic_rref.$(OBJEXT) \
	test-berlekamp.$(OBJEXT) test-berlekamp_hensel.$(OBJEXT) \
	test-bigint_construct.$(OBJEXT) \
	test-bigint_double_plus_double_minus.$(OBJEXT) \
	test-bigint_even_odd.$(OBJEXT) \
	test-big_int_io_binary.$(OBJEXT) \
	test-bigint_multiply_divide.$(OBJEXT) \
	test-bigint_null_unit.$(OBJEXT) \
	test-bigint_plus_minus.$(OBJEXT) test-bigint_swap.$(OBJEXT) \
	test-brent.$(OBJEXT) test-cone.$(OBJEXT) \
	test-dense_sparse_polynom.$(OBJEXT) \
	test-fft_multiplication.$(OBJEXT) \
	test-find_small_primes.$(OBJEXT) test-gcd.$(OBJEXT) \
	test-intcount_barvinok.$(OBJEXT) test-integer_divide.$(OBJEXT) \
	test-integer_size.$(OBJEXT) test-karatsuba.$(OBJEXT) \
	test-lll_reduction.$(OBJEXT) \
	test-mandatory_object_functions.$(OBJEXT) \
	test-matrix_addmul_cols.$(OBJEXT) \
	test-matrix_addmul_rows.$(OBJEXT) \
	test-matrix_add_scalar.$(OBJEXT) test-matrix_det.$(OBJEXT) \
	test-matrix_det_int.$(OBJEXT) test-matrix_insert_col.$(OBJEXT) \
	test-matrix_insert_row.$(OBJEXT) test-matrix_inverse.$(OBJEXT) \
	test-matrix_io_binary.$(OBJEXT) test-matrix_is_null.$(OBJEXT) \
	test-matrix_is_square.$(OBJEXT) test-matrix_is_unit.$(OBJEXT) \
	test-matrix_matrix_add.$(OBJEXT) \
	test-matrix_matrix_mult.$(OBJEXT) \
	test-matrix_mul_scalar.$(OBJEXT) \
	test-matrix_mult_col.$(OBJEXT) test-matrix_mult_row.$(OBJEXT) \
	test-matrix_opposite.$(OBJEXT) test-matrix_ops.$(OBJEXT) \
	test-matrix_string_constructor.$(OBJEXT) \
	test-matrix_swap_col.$(OBJEXT) test-matrix_swap_row.$(OBJEXT) \
	test-matrix_transpose.$(OBJEXT) test-minkowski_diff.$(OBJEXT) \
	test-orthogonalization_generic_gram_schmidt.$(OBJEXT) \
	test-pollard_pm1.$(OBJEXT) test-polyhedron_distance.$(OBJEXT) \
	test-polynom_init_convert.$(OBJEXT) \
	test-polynom_io_binary.$(OBJEXT) \
	test-prime_miller_rabin.$(OBJEXT) test-rand.$(OBJEXT) \
	test-rational_compares.$(OBJEXT) \
	test-rational_constructor.$(OBJEXT) test-rational.$(OBJEXT) \
	test-rational_ifloor_iceil_frac_abs.$(OBJEXT) \
	test-rational_inverse.$(OBJEXT) \
	test-rational_io_binary.$(OBJEXT) \
	test-rational_is_integer.$(OBJEXT) \
	test-rational_is_normal.$(OBJEXT) \
	test-rational_is_null.$(OBJEXT) \
	test-rational_is_unit.$(OBJEXT) \
	test-rational_mul_div.$(OBJEXT) \
	test-rational_numer_denom.$(OBJEXT) \
	test-rational_opposite.$(OBJEXT) \
	test-rational_plus_minus.$(OBJEXT) \
	test-rational_sign.$(OBJEXT) test-rational_swap.$(OBJEXT) \
	test-residue.$(OBJEXT) test-residue_factory.$(OBJEXT) \
	test-rho_pollard_function.$(OBJEXT) \
	test-skeleton_motzkin_burger.$(OBJEXT) \
	test-smith_integer.$(OBJEXT) test-sparse_polynom_cmp.$(OBJEXT) \
	test-sparse_polynom_multiply_divide_monom.$(OBJEXT) \
	test-sparse_polynom_multiply_divide_polynom.$(OBJEXT) \
	test-sparse_polynom_multiply_divide_scalar.$(OBJEXT) \
	test-sparse_polynom_plus_minus_monom.$(OBJEXT) \
	test-sparse_polynom_plus_minus_polynom.$(OBJEXT) \
	test-sparse_polynom_plus_minus_scalar.$(OBJEXT) \
	test-stdafx.$(OBJEXT) test-test1part1.$(OBJEXT) \
	test-test1part2.$(OBJEXT) test-test1part3.$(OBJEXT) \
	test-test1part4.$(OBJEXT) test-test2.$(OBJEXT) \
	test-test3.$(OBJEXT) test-test4part1.$(OBJEXT) \
	test-test4part2.$(OBJEXT) test-test4part3.$(OBJEXT) \
	test-test4part4.$(OBJEXT) test-test4part5.$(OBJEXT) \
	test-test4part6.$(OBJEXT) test-test4part7.$(OBJEXT) \
	test-test4part8.$(OBJEXT) test-test5.$(OBJEXT) \
	test-timer_resolution.$(OBJEXT) test-triangulate.$(OBJEXT) \
	test-type_pair_traits_for_bn.$(OBJEXT) \
	test-type_pair_traits_is_convertible.$(OBJEXT) \
	test-vector_access.$(OBJEXT) test-vector_compares.$(OBJEXT) \
	test-vector_constructor.$(OBJEXT) test-vector.$(OBJEXT) \
	test-vector_inverse.$(OBJEXT) test-vector_io_binary.$(OBJEXT) \
	test-vector_is_null.$(OBJEXT) test-vector_is_unit.$(OBJEXT) \
	test-vector_matrix_init.$(OBJEXT) \
	test-vector_mix_comp.$(OBJEXT) test-vector_mul_div.$(OBJEXT) \
	test-vector_opposite.$(OBJEXT) \
	test-vector_plus_minus.$(OBJEXT) test-vector_swap.$(OBJEXT) \
	test-vector_take_subvector.$(OBJEXT) test-winograd.$(OBJEXT)
test_OBJECTS = $(am_test_OBJECTS)
test_DEPENDENCIES = $(top_builddir)/src/arageli/libtestarageli.a \
	$(top_builddir)/tool/ts/src/ts/libts.a
test_LINK = $(CXXLD) $(test_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)/src/arageli
depcomp = $(SHELL) $(top_srcdir)/build/linux/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(test_SOURCES)
DIST_SOURCES = $(test_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/bader/autotools/build/linux/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/bader/autotools/build/linux/missing --run tar
AUTOCONF = ${SHELL} /home/bader/autotools/build/linux/missing --run autoconf
AUTOHEADER = ${SHELL} /home/bader/autotools/build/linux/missing --run autoheader
AUTOMAKE = ${SHELL} /home/bader/autotools/build/linux/missing --run automake-1.10
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/bader/autotools/build/linux/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = arageli
PACKAGE_BUGREPORT = support.arageli@gmail.com
PACKAGE_NAME = Arageli
PACKAGE_STRING = Arageli 2.2.8
PACKAGE_TARNAME = arageli
PACKAGE_VERSION = 2.2.8
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 2.2.8
abs_builddir = /home/bader/autotools/test
abs_srcdir = /home/bader/autotools/test
abs_top_builddir = /home/bader/autotools
abs_top_srcdir = /home/bader/autotools
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/bader/autotools/build/linux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ..
top_srcdir = ..
test_CXXFLAGS = -I$(top_builddir)/src/ -I$(top_builddir)/tool/ts/src/ -DARAGELI_SOURCE -DARAGELI_DEBUG_LEVEL=3 -DARAGELI_ASSERT_THROW_EXCEPTION
test_LDADD = $(top_builddir)/src/arageli/libtestarageli.a $(top_builddir)/tool/ts/src/ts/libts.a
test_SOURCES = \
				algebraic_rref.cpp\
				berlekamp.cpp\
				berlekamp_hensel.cpp\
				bigint_construct.cpp\
				bigint_double_plus_double_minus.cpp\
				bigint_even_odd.cpp\
				big_int_io_binary.cpp\
				bigint_multiply_divide.cpp\
				bigint_null_unit.cpp\
				bigint_plus_minus.cpp\
				bigint_swap.cpp\
				brent.cpp\
				cone.cpp\
				dense_sparse_polynom.cpp\
				fft_multiplication.cpp\
				find_small_primes.cpp\
				gcd.cpp\
				intcount_barvinok.cpp\
				integer_divide.cpp\
				integer_size.cpp\
				karatsuba.cpp\
				lll_reduction.cpp\
				mandatory_object_functions.cpp\
				matrix_addmul_cols.cpp\
				matrix_addmul_rows.cpp\
				matrix_add_scalar.cpp\
				matrix_det.cpp\
				matrix_det_int.cpp\
				matrix_insert_col.cpp\
				matrix_insert_row.cpp\
				matrix_inverse.cpp\
				matrix_io_binary.cpp\
				matrix_is_null.cpp\
				matrix_is_square.cpp\
				matrix_is_unit.cpp\
				matrix_matrix_add.cpp\
				matrix_matrix_mult.cpp\
				matrix_mul_scalar.cpp\
				matrix_mult_col.cpp\
				matrix_mult_row.cpp\
				matrix_opposite.cpp\
				matrix_ops.cpp\
				matrix_string_constructor.cpp\
				matrix_swap_col.cpp\
				matrix_swap_row.cpp\
				matrix_transpose.cpp\
				minkowski_diff.cpp\
				orthogonalization_generic_gram_schmidt.cpp\
				pollard_pm1.cpp\
				polyhedron_distance.cpp\
				polynom_init_convert.cpp\
				polynom_io_binary.cpp\
				prime_miller_rabin.cpp\
				rand.cpp\
				rational_compares.cpp\
				rational_constructor.cpp\
				rational.cpp\
				rational_ifloor_iceil_frac_abs.cpp\
				rational_inverse.cpp\
				rational_io_binary.cpp\
				rational_is_integer.cpp\
				rational_is_normal.cpp\
				rational_is_null.cpp\
				rational_is_unit.cpp\
				rational_mul_div.cpp\
				rational_numer_denom.cpp\
				rational_opposite.cpp\
				rational_plus_minus.cpp\
				rational_sign.cpp\
				rational_swap.cpp\
				residue.cpp\
				residue_factory.cpp\
				rho_pollard_function.cpp\
				skeleton_motzkin_burger.cpp\
				smith_integer.cpp\
				sparse_polynom_cmp.cpp\
				sparse_polynom_multiply_divide_monom.cpp\
				sparse_polynom_multiply_divide_polynom.cpp\
				sparse_polynom_multiply_divide_scalar.cpp\
				sparse_polynom_plus_minus_monom.cpp\
				sparse_polynom_plus_minus_polynom.cpp\
				sparse_polynom_plus_minus_scalar.cpp\
				stdafx.cpp\
				test1part1.cpp\
				test1part2.cpp\
				test1part3.cpp\
				test1part4.cpp\
				test2.cpp\
				test3.cpp\
				test4part1.cpp\
				test4part2.cpp\
				test4part3.cpp\
				test4part4.cpp\
				test4part5.cpp\
				test4part6.cpp\
				test4part7.cpp\
				test4part8.cpp\
				test5.cpp\
				timer_resolution.cpp\
				triangulate.cpp\
				type_pair_traits_for_bn.cpp\
				type_pair_traits_is_convertible.cpp\
				vector_access.cpp\
				vector_compares.cpp\
				vector_constructor.cpp\
				vector.cpp\
				vector_inverse.cpp\
				vector_io_binary.cpp\
				vector_is_null.cpp\
				vector_is_unit.cpp\
				vector_matrix_init.cpp\
				vector_mix_comp.cpp\
				vector_mul_div.cpp\
				vector_opposite.cpp\
				vector_plus_minus.cpp\
				vector_swap.cpp\
				vector_take_subvector.cpp\
				winograd.cpp\
				io_simple_binary.hpp\
				matrix_ops.hpp\
				rand.hpp\
				rational.hpp\
				ring.hpp\
				stdafx.hpp\
				test1.hpp\
				universal.hpp\
				vector.hpp

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  test/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  test/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
test$(EXEEXT): $(test_OBJECTS) $(test_DEPENDENCIES) 
	@rm -f test$(EXEEXT)
	$(test_LINK) $(test_OBJECTS) $(test_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/test-algebraic_rref.Po
include ./$(DEPDIR)/test-berlekamp.Po
include ./$(DEPDIR)/test-berlekamp_hensel.Po
include ./$(DEPDIR)/test-big_int_io_binary.Po
include ./$(DEPDIR)/test-bigint_construct.Po
include ./$(DEPDIR)/test-bigint_double_plus_double_minus.Po
include ./$(DEPDIR)/test-bigint_even_odd.Po
include ./$(DEPDIR)/test-bigint_multiply_divide.Po
include ./$(DEPDIR)/test-bigint_null_unit.Po
include ./$(DEPDIR)/test-bigint_plus_minus.Po
include ./$(DEPDIR)/test-bigint_swap.Po
include ./$(DEPDIR)/test-brent.Po
include ./$(DEPDIR)/test-cone.Po
include ./$(DEPDIR)/test-dense_sparse_polynom.Po
include ./$(DEPDIR)/test-fft_multiplication.Po
include ./$(DEPDIR)/test-find_small_primes.Po
include ./$(DEPDIR)/test-gcd.Po
include ./$(DEPDIR)/test-intcount_barvinok.Po
include ./$(DEPDIR)/test-integer_divide.Po
include ./$(DEPDIR)/test-integer_size.Po
include ./$(DEPDIR)/test-karatsuba.Po
include ./$(DEPDIR)/test-lll_reduction.Po
include ./$(DEPDIR)/test-mandatory_object_functions.Po
include ./$(DEPDIR)/test-matrix_add_scalar.Po
include ./$(DEPDIR)/test-matrix_addmul_cols.Po
include ./$(DEPDIR)/test-matrix_addmul_rows.Po
include ./$(DEPDIR)/test-matrix_det.Po
include ./$(DEPDIR)/test-matrix_det_int.Po
include ./$(DEPDIR)/test-matrix_insert_col.Po
include ./$(DEPDIR)/test-matrix_insert_row.Po
include ./$(DEPDIR)/test-matrix_inverse.Po
include ./$(DEPDIR)/test-matrix_io_binary.Po
include ./$(DEPDIR)/test-matrix_is_null.Po
include ./$(DEPDIR)/test-matrix_is_square.Po
include ./$(DEPDIR)/test-matrix_is_unit.Po
include ./$(DEPDIR)/test-matrix_matrix_add.Po
include ./$(DEPDIR)/test-matrix_matrix_mult.Po
include ./$(DEPDIR)/test-matrix_mul_scalar.Po
include ./$(DEPDIR)/test-matrix_mult_col.Po
include ./$(DEPDIR)/test-matrix_mult_row.Po
include ./$(DEPDIR)/test-matrix_opposite.Po
include ./$(DEPDIR)/test-matrix_ops.Po
include ./$(DEPDIR)/test-matrix_string_constructor.Po
include ./$(DEPDIR)/test-matrix_swap_col.Po
include ./$(DEPDIR)/test-matrix_swap_row.Po
include ./$(DEPDIR)/test-matrix_transpose.Po
include ./$(DEPDIR)/test-minkowski_diff.Po
include ./$(DEPDIR)/test-orthogonalization_generic_gram_schmidt.Po
include ./$(DEPDIR)/test-pollard_pm1.Po
include ./$(DEPDIR)/test-polyhedron_distance.Po
include ./$(DEPDIR)/test-polynom_init_convert.Po
include ./$(DEPDIR)/test-polynom_io_binary.Po
include ./$(DEPDIR)/test-prime_miller_rabin.Po
include ./$(DEPDIR)/test-rand.Po
include ./$(DEPDIR)/test-rational.Po
include ./$(DEPDIR)/test-rational_compares.Po
include ./$(DEPDIR)/test-rational_constructor.Po
include ./$(DEPDIR)/test-rational_ifloor_iceil_frac_abs.Po
include ./$(DEPDIR)/test-rational_inverse.Po
include ./$(DEPDIR)/test-rational_io_binary.Po
include ./$(DEPDIR)/test-rational_is_integer.Po
include ./$(DEPDIR)/test-rational_is_normal.Po
include ./$(DEPDIR)/test-rational_is_null.Po
include ./$(DEPDIR)/test-rational_is_unit.Po
include ./$(DEPDIR)/test-rational_mul_div.Po
include ./$(DEPDIR)/test-rational_numer_denom.Po
include ./$(DEPDIR)/test-rational_opposite.Po
include ./$(DEPDIR)/test-rational_plus_minus.Po
include ./$(DEPDIR)/test-rational_sign.Po
include ./$(DEPDIR)/test-rational_swap.Po
include ./$(DEPDIR)/test-residue.Po
include ./$(DEPDIR)/test-residue_factory.Po
include ./$(DEPDIR)/test-rho_pollard_function.Po
include ./$(DEPDIR)/test-skeleton_motzkin_burger.Po
include ./$(DEPDIR)/test-smith_integer.Po
include ./$(DEPDIR)/test-sparse_polynom_cmp.Po
include ./$(DEPDIR)/test-sparse_polynom_multiply_divide_monom.Po
include ./$(DEPDIR)/test-sparse_polynom_multiply_divide_polynom.Po
include ./$(DEPDIR)/test-sparse_polynom_multiply_divide_scalar.Po
include ./$(DEPDIR)/test-sparse_polynom_plus_minus_monom.Po
include ./$(DEPDIR)/test-sparse_polynom_plus_minus_polynom.Po
include ./$(DEPDIR)/test-sparse_polynom_plus_minus_scalar.Po
include ./$(DEPDIR)/test-stdafx.Po
include ./$(DEPDIR)/test-test1part1.Po
include ./$(DEPDIR)/test-test1part2.Po
include ./$(DEPDIR)/test-test1part3.Po
include ./$(DEPDIR)/test-test1part4.Po
include ./$(DEPDIR)/test-test2.Po
include ./$(DEPDIR)/test-test3.Po
include ./$(DEPDIR)/test-test4part1.Po
include ./$(DEPDIR)/test-test4part2.Po
include ./$(DEPDIR)/test-test4part3.Po
include ./$(DEPDIR)/test-test4part4.Po
include ./$(DEPDIR)/test-test4part5.Po
include ./$(DEPDIR)/test-test4part6.Po
include ./$(DEPDIR)/test-test4part7.Po
include ./$(DEPDIR)/test-test4part8.Po
include ./$(DEPDIR)/test-test5.Po
include ./$(DEPDIR)/test-timer_resolution.Po
include ./$(DEPDIR)/test-triangulate.Po
include ./$(DEPDIR)/test-type_pair_traits_for_bn.Po
include ./$(DEPDIR)/test-type_pair_traits_is_convertible.Po
include ./$(DEPDIR)/test-vector.Po
include ./$(DEPDIR)/test-vector_access.Po
include ./$(DEPDIR)/test-vector_compares.Po
include ./$(DEPDIR)/test-vector_constructor.Po
include ./$(DEPDIR)/test-vector_inverse.Po
include ./$(DEPDIR)/test-vector_io_binary.Po
include ./$(DEPDIR)/test-vector_is_null.Po
include ./$(DEPDIR)/test-vector_is_unit.Po
include ./$(DEPDIR)/test-vector_matrix_init.Po
include ./$(DEPDIR)/test-vector_mix_comp.Po
include ./$(DEPDIR)/test-vector_mul_div.Po
include ./$(DEPDIR)/test-vector_opposite.Po
include ./$(DEPDIR)/test-vector_plus_minus.Po
include ./$(DEPDIR)/test-vector_swap.Po
include ./$(DEPDIR)/test-vector_take_subvector.Po
include ./$(DEPDIR)/test-winograd.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

test-algebraic_rref.o: algebraic_rref.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-algebraic_rref.o -MD -MP -MF $(DEPDIR)/test-algebraic_rref.Tpo -c -o test-algebraic_rref.o `test -f 'algebraic_rref.cpp' || echo '$(srcdir)/'`algebraic_rref.cpp
	mv -f $(DEPDIR)/test-algebraic_rref.Tpo $(DEPDIR)/test-algebraic_rref.Po
#	source='algebraic_rref.cpp' object='test-algebraic_rref.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-algebraic_rref.o `test -f 'algebraic_rref.cpp' || echo '$(srcdir)/'`algebraic_rref.cpp

test-algebraic_rref.obj: algebraic_rref.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-algebraic_rref.obj -MD -MP -MF $(DEPDIR)/test-algebraic_rref.Tpo -c -o test-algebraic_rref.obj `if test -f 'algebraic_rref.cpp'; then $(CYGPATH_W) 'algebraic_rref.cpp'; else $(CYGPATH_W) '$(srcdir)/algebraic_rref.cpp'; fi`
	mv -f $(DEPDIR)/test-algebraic_rref.Tpo $(DEPDIR)/test-algebraic_rref.Po
#	source='algebraic_rref.cpp' object='test-algebraic_rref.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-algebraic_rref.obj `if test -f 'algebraic_rref.cpp'; then $(CYGPATH_W) 'algebraic_rref.cpp'; else $(CYGPATH_W) '$(srcdir)/algebraic_rref.cpp'; fi`

test-berlekamp.o: berlekamp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-berlekamp.o -MD -MP -MF $(DEPDIR)/test-berlekamp.Tpo -c -o test-berlekamp.o `test -f 'berlekamp.cpp' || echo '$(srcdir)/'`berlekamp.cpp
	mv -f $(DEPDIR)/test-berlekamp.Tpo $(DEPDIR)/test-berlekamp.Po
#	source='berlekamp.cpp' object='test-berlekamp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-berlekamp.o `test -f 'berlekamp.cpp' || echo '$(srcdir)/'`berlekamp.cpp

test-berlekamp.obj: berlekamp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-berlekamp.obj -MD -MP -MF $(DEPDIR)/test-berlekamp.Tpo -c -o test-berlekamp.obj `if test -f 'berlekamp.cpp'; then $(CYGPATH_W) 'berlekamp.cpp'; else $(CYGPATH_W) '$(srcdir)/berlekamp.cpp'; fi`
	mv -f $(DEPDIR)/test-berlekamp.Tpo $(DEPDIR)/test-berlekamp.Po
#	source='berlekamp.cpp' object='test-berlekamp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-berlekamp.obj `if test -f 'berlekamp.cpp'; then $(CYGPATH_W) 'berlekamp.cpp'; else $(CYGPATH_W) '$(srcdir)/berlekamp.cpp'; fi`

test-berlekamp_hensel.o: berlekamp_hensel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-berlekamp_hensel.o -MD -MP -MF $(DEPDIR)/test-berlekamp_hensel.Tpo -c -o test-berlekamp_hensel.o `test -f 'berlekamp_hensel.cpp' || echo '$(srcdir)/'`berlekamp_hensel.cpp
	mv -f $(DEPDIR)/test-berlekamp_hensel.Tpo $(DEPDIR)/test-berlekamp_hensel.Po
#	source='berlekamp_hensel.cpp' object='test-berlekamp_hensel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-berlekamp_hensel.o `test -f 'berlekamp_hensel.cpp' || echo '$(srcdir)/'`berlekamp_hensel.cpp

test-berlekamp_hensel.obj: berlekamp_hensel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-berlekamp_hensel.obj -MD -MP -MF $(DEPDIR)/test-berlekamp_hensel.Tpo -c -o test-berlekamp_hensel.obj `if test -f 'berlekamp_hensel.cpp'; then $(CYGPATH_W) 'berlekamp_hensel.cpp'; else $(CYGPATH_W) '$(srcdir)/berlekamp_hensel.cpp'; fi`
	mv -f $(DEPDIR)/test-berlekamp_hensel.Tpo $(DEPDIR)/test-berlekamp_hensel.Po
#	source='berlekamp_hensel.cpp' object='test-berlekamp_hensel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-berlekamp_hensel.obj `if test -f 'berlekamp_hensel.cpp'; then $(CYGPATH_W) 'berlekamp_hensel.cpp'; else $(CYGPATH_W) '$(srcdir)/berlekamp_hensel.cpp'; fi`

test-bigint_construct.o: bigint_construct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_construct.o -MD -MP -MF $(DEPDIR)/test-bigint_construct.Tpo -c -o test-bigint_construct.o `test -f 'bigint_construct.cpp' || echo '$(srcdir)/'`bigint_construct.cpp
	mv -f $(DEPDIR)/test-bigint_construct.Tpo $(DEPDIR)/test-bigint_construct.Po
#	source='bigint_construct.cpp' object='test-bigint_construct.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_construct.o `test -f 'bigint_construct.cpp' || echo '$(srcdir)/'`bigint_construct.cpp

test-bigint_construct.obj: bigint_construct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_construct.obj -MD -MP -MF $(DEPDIR)/test-bigint_construct.Tpo -c -o test-bigint_construct.obj `if test -f 'bigint_construct.cpp'; then $(CYGPATH_W) 'bigint_construct.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_construct.cpp'; fi`
	mv -f $(DEPDIR)/test-bigint_construct.Tpo $(DEPDIR)/test-bigint_construct.Po
#	source='bigint_construct.cpp' object='test-bigint_construct.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_construct.obj `if test -f 'bigint_construct.cpp'; then $(CYGPATH_W) 'bigint_construct.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_construct.cpp'; fi`

test-bigint_double_plus_double_minus.o: bigint_double_plus_double_minus.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_double_plus_double_minus.o -MD -MP -MF $(DEPDIR)/test-bigint_double_plus_double_minus.Tpo -c -o test-bigint_double_plus_double_minus.o `test -f 'bigint_double_plus_double_minus.cpp' || echo '$(srcdir)/'`bigint_double_plus_double_minus.cpp
	mv -f $(DEPDIR)/test-bigint_double_plus_double_minus.Tpo $(DEPDIR)/test-bigint_double_plus_double_minus.Po
#	source='bigint_double_plus_double_minus.cpp' object='test-bigint_double_plus_double_minus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_double_plus_double_minus.o `test -f 'bigint_double_plus_double_minus.cpp' || echo '$(srcdir)/'`bigint_double_plus_double_minus.cpp

test-bigint_double_plus_double_minus.obj: bigint_double_plus_double_minus.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_double_plus_double_minus.obj -MD -MP -MF $(DEPDIR)/test-bigint_double_plus_double_minus.Tpo -c -o test-bigint_double_plus_double_minus.obj `if test -f 'bigint_double_plus_double_minus.cpp'; then $(CYGPATH_W) 'bigint_double_plus_double_minus.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_double_plus_double_minus.cpp'; fi`
	mv -f $(DEPDIR)/test-bigint_double_plus_double_minus.Tpo $(DEPDIR)/test-bigint_double_plus_double_minus.Po
#	source='bigint_double_plus_double_minus.cpp' object='test-bigint_double_plus_double_minus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_double_plus_double_minus.obj `if test -f 'bigint_double_plus_double_minus.cpp'; then $(CYGPATH_W) 'bigint_double_plus_double_minus.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_double_plus_double_minus.cpp'; fi`

test-bigint_even_odd.o: bigint_even_odd.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_even_odd.o -MD -MP -MF $(DEPDIR)/test-bigint_even_odd.Tpo -c -o test-bigint_even_odd.o `test -f 'bigint_even_odd.cpp' || echo '$(srcdir)/'`bigint_even_odd.cpp
	mv -f $(DEPDIR)/test-bigint_even_odd.Tpo $(DEPDIR)/test-bigint_even_odd.Po
#	source='bigint_even_odd.cpp' object='test-bigint_even_odd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_even_odd.o `test -f 'bigint_even_odd.cpp' || echo '$(srcdir)/'`bigint_even_odd.cpp

test-bigint_even_odd.obj: bigint_even_odd.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_even_odd.obj -MD -MP -MF $(DEPDIR)/test-bigint_even_odd.Tpo -c -o test-bigint_even_odd.obj `if test -f 'bigint_even_odd.cpp'; then $(CYGPATH_W) 'bigint_even_odd.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_even_odd.cpp'; fi`
	mv -f $(DEPDIR)/test-bigint_even_odd.Tpo $(DEPDIR)/test-bigint_even_odd.Po
#	source='bigint_even_odd.cpp' object='test-bigint_even_odd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_even_odd.obj `if test -f 'bigint_even_odd.cpp'; then $(CYGPATH_W) 'bigint_even_odd.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_even_odd.cpp'; fi`

test-big_int_io_binary.o: big_int_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-big_int_io_binary.o -MD -MP -MF $(DEPDIR)/test-big_int_io_binary.Tpo -c -o test-big_int_io_binary.o `test -f 'big_int_io_binary.cpp' || echo '$(srcdir)/'`big_int_io_binary.cpp
	mv -f $(DEPDIR)/test-big_int_io_binary.Tpo $(DEPDIR)/test-big_int_io_binary.Po
#	source='big_int_io_binary.cpp' object='test-big_int_io_binary.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-big_int_io_binary.o `test -f 'big_int_io_binary.cpp' || echo '$(srcdir)/'`big_int_io_binary.cpp

test-big_int_io_binary.obj: big_int_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-big_int_io_binary.obj -MD -MP -MF $(DEPDIR)/test-big_int_io_binary.Tpo -c -o test-big_int_io_binary.obj `if test -f 'big_int_io_binary.cpp'; then $(CYGPATH_W) 'big_int_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/big_int_io_binary.cpp'; fi`
	mv -f $(DEPDIR)/test-big_int_io_binary.Tpo $(DEPDIR)/test-big_int_io_binary.Po
#	source='big_int_io_binary.cpp' object='test-big_int_io_binary.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-big_int_io_binary.obj `if test -f 'big_int_io_binary.cpp'; then $(CYGPATH_W) 'big_int_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/big_int_io_binary.cpp'; fi`

test-bigint_multiply_divide.o: bigint_multiply_divide.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_multiply_divide.o -MD -MP -MF $(DEPDIR)/test-bigint_multiply_divide.Tpo -c -o test-bigint_multiply_divide.o `test -f 'bigint_multiply_divide.cpp' || echo '$(srcdir)/'`bigint_multiply_divide.cpp
	mv -f $(DEPDIR)/test-bigint_multiply_divide.Tpo $(DEPDIR)/test-bigint_multiply_divide.Po
#	source='bigint_multiply_divide.cpp' object='test-bigint_multiply_divide.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_multiply_divide.o `test -f 'bigint_multiply_divide.cpp' || echo '$(srcdir)/'`bigint_multiply_divide.cpp

test-bigint_multiply_divide.obj: bigint_multiply_divide.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_multiply_divide.obj -MD -MP -MF $(DEPDIR)/test-bigint_multiply_divide.Tpo -c -o test-bigint_multiply_divide.obj `if test -f 'bigint_multiply_divide.cpp'; then $(CYGPATH_W) 'bigint_multiply_divide.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_multiply_divide.cpp'; fi`
	mv -f $(DEPDIR)/test-bigint_multiply_divide.Tpo $(DEPDIR)/test-bigint_multiply_divide.Po
#	source='bigint_multiply_divide.cpp' object='test-bigint_multiply_divide.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_multiply_divide.obj `if test -f 'bigint_multiply_divide.cpp'; then $(CYGPATH_W) 'bigint_multiply_divide.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_multiply_divide.cpp'; fi`

test-bigint_null_unit.o: bigint_null_unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_null_unit.o -MD -MP -MF $(DEPDIR)/test-bigint_null_unit.Tpo -c -o test-bigint_null_unit.o `test -f 'bigint_null_unit.cpp' || echo '$(srcdir)/'`bigint_null_unit.cpp
	mv -f $(DEPDIR)/test-bigint_null_unit.Tpo $(DEPDIR)/test-bigint_null_unit.Po
#	source='bigint_null_unit.cpp' object='test-bigint_null_unit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_null_unit.o `test -f 'bigint_null_unit.cpp' || echo '$(srcdir)/'`bigint_null_unit.cpp

test-bigint_null_unit.obj: bigint_null_unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_null_unit.obj -MD -MP -MF $(DEPDIR)/test-bigint_null_unit.Tpo -c -o test-bigint_null_unit.obj `if test -f 'bigint_null_unit.cpp'; then $(CYGPATH_W) 'bigint_null_unit.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_null_unit.cpp'; fi`
	mv -f $(DEPDIR)/test-bigint_null_unit.Tpo $(DEPDIR)/test-bigint_null_unit.Po
#	source='bigint_null_unit.cpp' object='test-bigint_null_unit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_null_unit.obj `if test -f 'bigint_null_unit.cpp'; then $(CYGPATH_W) 'bigint_null_unit.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_null_unit.cpp'; fi`

test-bigint_plus_minus.o: bigint_plus_minus.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_plus_minus.o -MD -MP -MF $(DEPDIR)/test-bigint_plus_minus.Tpo -c -o test-bigint_plus_minus.o `test -f 'bigint_plus_minus.cpp' || echo '$(srcdir)/'`bigint_plus_minus.cpp
	mv -f $(DEPDIR)/test-bigint_plus_minus.Tpo $(DEPDIR)/test-bigint_plus_minus.Po
#	source='bigint_plus_minus.cpp' object='test-bigint_plus_minus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_plus_minus.o `test -f 'bigint_plus_minus.cpp' || echo '$(srcdir)/'`bigint_plus_minus.cpp

test-bigint_plus_minus.obj: bigint_plus_minus.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_plus_minus.obj -MD -MP -MF $(DEPDIR)/test-bigint_plus_minus.Tpo -c -o test-bigint_plus_minus.obj `if test -f 'bigint_plus_minus.cpp'; then $(CYGPATH_W) 'bigint_plus_minus.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_plus_minus.cpp'; fi`
	mv -f $(DEPDIR)/test-bigint_plus_minus.Tpo $(DEPDIR)/test-bigint_plus_minus.Po
#	source='bigint_plus_minus.cpp' object='test-bigint_plus_minus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_plus_minus.obj `if test -f 'bigint_plus_minus.cpp'; then $(CYGPATH_W) 'bigint_plus_minus.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_plus_minus.cpp'; fi`

test-bigint_swap.o: bigint_swap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_swap.o -MD -MP -MF $(DEPDIR)/test-bigint_swap.Tpo -c -o test-bigint_swap.o `test -f 'bigint_swap.cpp' || echo '$(srcdir)/'`bigint_swap.cpp
	mv -f $(DEPDIR)/test-bigint_swap.Tpo $(DEPDIR)/test-bigint_swap.Po
#	source='bigint_swap.cpp' object='test-bigint_swap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_swap.o `test -f 'bigint_swap.cpp' || echo '$(srcdir)/'`bigint_swap.cpp

test-bigint_swap.obj: bigint_swap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-bigint_swap.obj -MD -MP -MF $(DEPDIR)/test-bigint_swap.Tpo -c -o test-bigint_swap.obj `if test -f 'bigint_swap.cpp'; then $(CYGPATH_W) 'bigint_swap.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_swap.cpp'; fi`
	mv -f $(DEPDIR)/test-bigint_swap.Tpo $(DEPDIR)/test-bigint_swap.Po
#	source='bigint_swap.cpp' object='test-bigint_swap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-bigint_swap.obj `if test -f 'bigint_swap.cpp'; then $(CYGPATH_W) 'bigint_swap.cpp'; else $(CYGPATH_W) '$(srcdir)/bigint_swap.cpp'; fi`

test-brent.o: brent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-brent.o -MD -MP -MF $(DEPDIR)/test-brent.Tpo -c -o test-brent.o `test -f 'brent.cpp' || echo '$(srcdir)/'`brent.cpp
	mv -f $(DEPDIR)/test-brent.Tpo $(DEPDIR)/test-brent.Po
#	source='brent.cpp' object='test-brent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-brent.o `test -f 'brent.cpp' || echo '$(srcdir)/'`brent.cpp

test-brent.obj: brent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-brent.obj -MD -MP -MF $(DEPDIR)/test-brent.Tpo -c -o test-brent.obj `if test -f 'brent.cpp'; then $(CYGPATH_W) 'brent.cpp'; else $(CYGPATH_W) '$(srcdir)/brent.cpp'; fi`
	mv -f $(DEPDIR)/test-brent.Tpo $(DEPDIR)/test-brent.Po
#	source='brent.cpp' object='test-brent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-brent.obj `if test -f 'brent.cpp'; then $(CYGPATH_W) 'brent.cpp'; else $(CYGPATH_W) '$(srcdir)/brent.cpp'; fi`

test-cone.o: cone.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-cone.o -MD -MP -MF $(DEPDIR)/test-cone.Tpo -c -o test-cone.o `test -f 'cone.cpp' || echo '$(srcdir)/'`cone.cpp
	mv -f $(DEPDIR)/test-cone.Tpo $(DEPDIR)/test-cone.Po
#	source='cone.cpp' object='test-cone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-cone.o `test -f 'cone.cpp' || echo '$(srcdir)/'`cone.cpp

test-cone.obj: cone.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-cone.obj -MD -MP -MF $(DEPDIR)/test-cone.Tpo -c -o test-cone.obj `if test -f 'cone.cpp'; then $(CYGPATH_W) 'cone.cpp'; else $(CYGPATH_W) '$(srcdir)/cone.cpp'; fi`
	mv -f $(DEPDIR)/test-cone.Tpo $(DEPDIR)/test-cone.Po
#	source='cone.cpp' object='test-cone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-cone.obj `if test -f 'cone.cpp'; then $(CYGPATH_W) 'cone.cpp'; else $(CYGPATH_W) '$(srcdir)/cone.cpp'; fi`

test-dense_sparse_polynom.o: dense_sparse_polynom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-dense_sparse_polynom.o -MD -MP -MF $(DEPDIR)/test-dense_sparse_polynom.Tpo -c -o test-dense_sparse_polynom.o `test -f 'dense_sparse_polynom.cpp' || echo '$(srcdir)/'`dense_sparse_polynom.cpp
	mv -f $(DEPDIR)/test-dense_sparse_polynom.Tpo $(DEPDIR)/test-dense_sparse_polynom.Po
#	source='dense_sparse_polynom.cpp' object='test-dense_sparse_polynom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-dense_sparse_polynom.o `test -f 'dense_sparse_polynom.cpp' || echo '$(srcdir)/'`dense_sparse_polynom.cpp

test-dense_sparse_polynom.obj: dense_sparse_polynom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-dense_sparse_polynom.obj -MD -MP -MF $(DEPDIR)/test-dense_sparse_polynom.Tpo -c -o test-dense_sparse_polynom.obj `if test -f 'dense_sparse_polynom.cpp'; then $(CYGPATH_W) 'dense_sparse_polynom.cpp'; else $(CYGPATH_W) '$(srcdir)/dense_sparse_polynom.cpp'; fi`
	mv -f $(DEPDIR)/test-dense_sparse_polynom.Tpo $(DEPDIR)/test-dense_sparse_polynom.Po
#	source='dense_sparse_polynom.cpp' object='test-dense_sparse_polynom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-dense_sparse_polynom.obj `if test -f 'dense_sparse_polynom.cpp'; then $(CYGPATH_W) 'dense_sparse_polynom.cpp'; else $(CYGPATH_W) '$(srcdir)/dense_sparse_polynom.cpp'; fi`

test-fft_multiplication.o: fft_multiplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-fft_multiplication.o -MD -MP -MF $(DEPDIR)/test-fft_multiplication.Tpo -c -o test-fft_multiplication.o `test -f 'fft_multiplication.cpp' || echo '$(srcdir)/'`fft_multiplication.cpp
	mv -f $(DEPDIR)/test-fft_multiplication.Tpo $(DEPDIR)/test-fft_multiplication.Po
#	source='fft_multiplication.cpp' object='test-fft_multiplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-fft_multiplication.o `test -f 'fft_multiplication.cpp' || echo '$(srcdir)/'`fft_multiplication.cpp

test-fft_multiplication.obj: fft_multiplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-fft_multiplication.obj -MD -MP -MF $(DEPDIR)/test-fft_multiplication.Tpo -c -o test-fft_multiplication.obj `if test -f 'fft_multiplication.cpp'; then $(CYGPATH_W) 'fft_multiplication.cpp'; else $(CYGPATH_W) '$(srcdir)/fft_multiplication.cpp'; fi`
	mv -f $(DEPDIR)/test-fft_multiplication.Tpo $(DEPDIR)/test-fft_multiplication.Po
#	source='fft_multiplication.cpp' object='test-fft_multiplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-fft_multiplication.obj `if test -f 'fft_multiplication.cpp'; then $(CYGPATH_W) 'fft_multiplication.cpp'; else $(CYGPATH_W) '$(srcdir)/fft_multiplication.cpp'; fi`

test-find_small_primes.o: find_small_primes.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-find_small_primes.o -MD -MP -MF $(DEPDIR)/test-find_small_primes.Tpo -c -o test-find_small_primes.o `test -f 'find_small_primes.cpp' || echo '$(srcdir)/'`find_small_primes.cpp
	mv -f $(DEPDIR)/test-find_small_primes.Tpo $(DEPDIR)/test-find_small_primes.Po
#	source='find_small_primes.cpp' object='test-find_small_primes.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-find_small_primes.o `test -f 'find_small_primes.cpp' || echo '$(srcdir)/'`find_small_primes.cpp

test-find_small_primes.obj: find_small_primes.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-find_small_primes.obj -MD -MP -MF $(DEPDIR)/test-find_small_primes.Tpo -c -o test-find_small_primes.obj `if test -f 'find_small_primes.cpp'; then $(CYGPATH_W) 'find_small_primes.cpp'; else $(CYGPATH_W) '$(srcdir)/find_small_primes.cpp'; fi`
	mv -f $(DEPDIR)/test-find_small_primes.Tpo $(DEPDIR)/test-find_small_primes.Po
#	source='find_small_primes.cpp' object='test-find_small_primes.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-find_small_primes.obj `if test -f 'find_small_primes.cpp'; then $(CYGPATH_W) 'find_small_primes.cpp'; else $(CYGPATH_W) '$(srcdir)/find_small_primes.cpp'; fi`

test-gcd.o: gcd.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-gcd.o -MD -MP -MF $(DEPDIR)/test-gcd.Tpo -c -o test-gcd.o `test -f 'gcd.cpp' || echo '$(srcdir)/'`gcd.cpp
	mv -f $(DEPDIR)/test-gcd.Tpo $(DEPDIR)/test-gcd.Po
#	source='gcd.cpp' object='test-gcd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-gcd.o `test -f 'gcd.cpp' || echo '$(srcdir)/'`gcd.cpp

test-gcd.obj: gcd.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-gcd.obj -MD -MP -MF $(DEPDIR)/test-gcd.Tpo -c -o test-gcd.obj `if test -f 'gcd.cpp'; then $(CYGPATH_W) 'gcd.cpp'; else $(CYGPATH_W) '$(srcdir)/gcd.cpp'; fi`
	mv -f $(DEPDIR)/test-gcd.Tpo $(DEPDIR)/test-gcd.Po
#	source='gcd.cpp' object='test-gcd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-gcd.obj `if test -f 'gcd.cpp'; then $(CYGPATH_W) 'gcd.cpp'; else $(CYGPATH_W) '$(srcdir)/gcd.cpp'; fi`

test-intcount_barvinok.o: intcount_barvinok.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-intcount_barvinok.o -MD -MP -MF $(DEPDIR)/test-intcount_barvinok.Tpo -c -o test-intcount_barvinok.o `test -f 'intcount_barvinok.cpp' || echo '$(srcdir)/'`intcount_barvinok.cpp
	mv -f $(DEPDIR)/test-intcount_barvinok.Tpo $(DEPDIR)/test-intcount_barvinok.Po
#	source='intcount_barvinok.cpp' object='test-intcount_barvinok.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-intcount_barvinok.o `test -f 'intcount_barvinok.cpp' || echo '$(srcdir)/'`intcount_barvinok.cpp

test-intcount_barvinok.obj: intcount_barvinok.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-intcount_barvinok.obj -MD -MP -MF $(DEPDIR)/test-intcount_barvinok.Tpo -c -o test-intcount_barvinok.obj `if test -f 'intcount_barvinok.cpp'; then $(CYGPATH_W) 'intcount_barvinok.cpp'; else $(CYGPATH_W) '$(srcdir)/intcount_barvinok.cpp'; fi`
	mv -f $(DEPDIR)/test-intcount_barvinok.Tpo $(DEPDIR)/test-intcount_barvinok.Po
#	source='intcount_barvinok.cpp' object='test-intcount_barvinok.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-intcount_barvinok.obj `if test -f 'intcount_barvinok.cpp'; then $(CYGPATH_W) 'intcount_barvinok.cpp'; else $(CYGPATH_W) '$(srcdir)/intcount_barvinok.cpp'; fi`

test-integer_divide.o: integer_divide.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-integer_divide.o -MD -MP -MF $(DEPDIR)/test-integer_divide.Tpo -c -o test-integer_divide.o `test -f 'integer_divide.cpp' || echo '$(srcdir)/'`integer_divide.cpp
	mv -f $(DEPDIR)/test-integer_divide.Tpo $(DEPDIR)/test-integer_divide.Po
#	source='integer_divide.cpp' object='test-integer_divide.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-integer_divide.o `test -f 'integer_divide.cpp' || echo '$(srcdir)/'`integer_divide.cpp

test-integer_divide.obj: integer_divide.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-integer_divide.obj -MD -MP -MF $(DEPDIR)/test-integer_divide.Tpo -c -o test-integer_divide.obj `if test -f 'integer_divide.cpp'; then $(CYGPATH_W) 'integer_divide.cpp'; else $(CYGPATH_W) '$(srcdir)/integer_divide.cpp'; fi`
	mv -f $(DEPDIR)/test-integer_divide.Tpo $(DEPDIR)/test-integer_divide.Po
#	source='integer_divide.cpp' object='test-integer_divide.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-integer_divide.obj `if test -f 'integer_divide.cpp'; then $(CYGPATH_W) 'integer_divide.cpp'; else $(CYGPATH_W) '$(srcdir)/integer_divide.cpp'; fi`

test-integer_size.o: integer_size.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-integer_size.o -MD -MP -MF $(DEPDIR)/test-integer_size.Tpo -c -o test-integer_size.o `test -f 'integer_size.cpp' || echo '$(srcdir)/'`integer_size.cpp
	mv -f $(DEPDIR)/test-integer_size.Tpo $(DEPDIR)/test-integer_size.Po
#	source='integer_size.cpp' object='test-integer_size.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-integer_size.o `test -f 'integer_size.cpp' || echo '$(srcdir)/'`integer_size.cpp

test-integer_size.obj: integer_size.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-integer_size.obj -MD -MP -MF $(DEPDIR)/test-integer_size.Tpo -c -o test-integer_size.obj `if test -f 'integer_size.cpp'; then $(CYGPATH_W) 'integer_size.cpp'; else $(CYGPATH_W) '$(srcdir)/integer_size.cpp'; fi`
	mv -f $(DEPDIR)/test-integer_size.Tpo $(DEPDIR)/test-integer_size.Po
#	source='integer_size.cpp' object='test-integer_size.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-integer_size.obj `if test -f 'integer_size.cpp'; then $(CYGPATH_W) 'integer_size.cpp'; else $(CYGPATH_W) '$(srcdir)/integer_size.cpp'; fi`

test-karatsuba.o: karatsuba.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-karatsuba.o -MD -MP -MF $(DEPDIR)/test-karatsuba.Tpo -c -o test-karatsuba.o `test -f 'karatsuba.cpp' || echo '$(srcdir)/'`karatsuba.cpp
	mv -f $(DEPDIR)/test-karatsuba.Tpo $(DEPDIR)/test-karatsuba.Po
#	source='karatsuba.cpp' object='test-karatsuba.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-karatsuba.o `test -f 'karatsuba.cpp' || echo '$(srcdir)/'`karatsuba.cpp

test-karatsuba.obj: karatsuba.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-karatsuba.obj -MD -MP -MF $(DEPDIR)/test-karatsuba.Tpo -c -o test-karatsuba.obj `if test -f 'karatsuba.cpp'; then $(CYGPATH_W) 'karatsuba.cpp'; else $(CYGPATH_W) '$(srcdir)/karatsuba.cpp'; fi`
	mv -f $(DEPDIR)/test-karatsuba.Tpo $(DEPDIR)/test-karatsuba.Po
#	source='karatsuba.cpp' object='test-karatsuba.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-karatsuba.obj `if test -f 'karatsuba.cpp'; then $(CYGPATH_W) 'karatsuba.cpp'; else $(CYGPATH_W) '$(srcdir)/karatsuba.cpp'; fi`

test-lll_reduction.o: lll_reduction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-lll_reduction.o -MD -MP -MF $(DEPDIR)/test-lll_reduction.Tpo -c -o test-lll_reduction.o `test -f 'lll_reduction.cpp' || echo '$(srcdir)/'`lll_reduction.cpp
	mv -f $(DEPDIR)/test-lll_reduction.Tpo $(DEPDIR)/test-lll_reduction.Po
#	source='lll_reduction.cpp' object='test-lll_reduction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-lll_reduction.o `test -f 'lll_reduction.cpp' || echo '$(srcdir)/'`lll_reduction.cpp

test-lll_reduction.obj: lll_reduction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-lll_reduction.obj -MD -MP -MF $(DEPDIR)/test-lll_reduction.Tpo -c -o test-lll_reduction.obj `if test -f 'lll_reduction.cpp'; then $(CYGPATH_W) 'lll_reduction.cpp'; else $(CYGPATH_W) '$(srcdir)/lll_reduction.cpp'; fi`
	mv -f $(DEPDIR)/test-lll_reduction.Tpo $(DEPDIR)/test-lll_reduction.Po
#	source='lll_reduction.cpp' object='test-lll_reduction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-lll_reduction.obj `if test -f 'lll_reduction.cpp'; then $(CYGPATH_W) 'lll_reduction.cpp'; else $(CYGPATH_W) '$(srcdir)/lll_reduction.cpp'; fi`

test-mandatory_object_functions.o: mandatory_object_functions.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-mandatory_object_functions.o -MD -MP -MF $(DEPDIR)/test-mandatory_object_functions.Tpo -c -o test-mandatory_object_functions.o `test -f 'mandatory_object_functions.cpp' || echo '$(srcdir)/'`mandatory_object_functions.cpp
	mv -f $(DEPDIR)/test-mandatory_object_functions.Tpo $(DEPDIR)/test-mandatory_object_functions.Po
#	source='mandatory_object_functions.cpp' object='test-mandatory_object_functions.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-mandatory_object_functions.o `test -f 'mandatory_object_functions.cpp' || echo '$(srcdir)/'`mandatory_object_functions.cpp

test-mandatory_object_functions.obj: mandatory_object_functions.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-mandatory_object_functions.obj -MD -MP -MF $(DEPDIR)/test-mandatory_object_functions.Tpo -c -o test-mandatory_object_functions.obj `if test -f 'mandatory_object_functions.cpp'; then $(CYGPATH_W) 'mandatory_object_functions.cpp'; else $(CYGPATH_W) '$(srcdir)/mandatory_object_functions.cpp'; fi`
	mv -f $(DEPDIR)/test-mandatory_object_functions.Tpo $(DEPDIR)/test-mandatory_object_functions.Po
#	source='mandatory_object_functions.cpp' object='test-mandatory_object_functions.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-mandatory_object_functions.obj `if test -f 'mandatory_object_functions.cpp'; then $(CYGPATH_W) 'mandatory_object_functions.cpp'; else $(CYGPATH_W) '$(srcdir)/mandatory_object_functions.cpp'; fi`

test-matrix_addmul_cols.o: matrix_addmul_cols.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_addmul_cols.o -MD -MP -MF $(DEPDIR)/test-matrix_addmul_cols.Tpo -c -o test-matrix_addmul_cols.o `test -f 'matrix_addmul_cols.cpp' || echo '$(srcdir)/'`matrix_addmul_cols.cpp
	mv -f $(DEPDIR)/test-matrix_addmul_cols.Tpo $(DEPDIR)/test-matrix_addmul_cols.Po
#	source='matrix_addmul_cols.cpp' object='test-matrix_addmul_cols.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_addmul_cols.o `test -f 'matrix_addmul_cols.cpp' || echo '$(srcdir)/'`matrix_addmul_cols.cpp

test-matrix_addmul_cols.obj: matrix_addmul_cols.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_addmul_cols.obj -MD -MP -MF $(DEPDIR)/test-matrix_addmul_cols.Tpo -c -o test-matrix_addmul_cols.obj `if test -f 'matrix_addmul_cols.cpp'; then $(CYGPATH_W) 'matrix_addmul_cols.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_addmul_cols.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_addmul_cols.Tpo $(DEPDIR)/test-matrix_addmul_cols.Po
#	source='matrix_addmul_cols.cpp' object='test-matrix_addmul_cols.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_addmul_cols.obj `if test -f 'matrix_addmul_cols.cpp'; then $(CYGPATH_W) 'matrix_addmul_cols.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_addmul_cols.cpp'; fi`

test-matrix_addmul_rows.o: matrix_addmul_rows.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_addmul_rows.o -MD -MP -MF $(DEPDIR)/test-matrix_addmul_rows.Tpo -c -o test-matrix_addmul_rows.o `test -f 'matrix_addmul_rows.cpp' || echo '$(srcdir)/'`matrix_addmul_rows.cpp
	mv -f $(DEPDIR)/test-matrix_addmul_rows.Tpo $(DEPDIR)/test-matrix_addmul_rows.Po
#	source='matrix_addmul_rows.cpp' object='test-matrix_addmul_rows.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_addmul_rows.o `test -f 'matrix_addmul_rows.cpp' || echo '$(srcdir)/'`matrix_addmul_rows.cpp

test-matrix_addmul_rows.obj: matrix_addmul_rows.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_addmul_rows.obj -MD -MP -MF $(DEPDIR)/test-matrix_addmul_rows.Tpo -c -o test-matrix_addmul_rows.obj `if test -f 'matrix_addmul_rows.cpp'; then $(CYGPATH_W) 'matrix_addmul_rows.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_addmul_rows.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_addmul_rows.Tpo $(DEPDIR)/test-matrix_addmul_rows.Po
#	source='matrix_addmul_rows.cpp' object='test-matrix_addmul_rows.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_addmul_rows.obj `if test -f 'matrix_addmul_rows.cpp'; then $(CYGPATH_W) 'matrix_addmul_rows.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_addmul_rows.cpp'; fi`

test-matrix_add_scalar.o: matrix_add_scalar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_add_scalar.o -MD -MP -MF $(DEPDIR)/test-matrix_add_scalar.Tpo -c -o test-matrix_add_scalar.o `test -f 'matrix_add_scalar.cpp' || echo '$(srcdir)/'`matrix_add_scalar.cpp
	mv -f $(DEPDIR)/test-matrix_add_scalar.Tpo $(DEPDIR)/test-matrix_add_scalar.Po
#	source='matrix_add_scalar.cpp' object='test-matrix_add_scalar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_add_scalar.o `test -f 'matrix_add_scalar.cpp' || echo '$(srcdir)/'`matrix_add_scalar.cpp

test-matrix_add_scalar.obj: matrix_add_scalar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_add_scalar.obj -MD -MP -MF $(DEPDIR)/test-matrix_add_scalar.Tpo -c -o test-matrix_add_scalar.obj `if test -f 'matrix_add_scalar.cpp'; then $(CYGPATH_W) 'matrix_add_scalar.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_add_scalar.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_add_scalar.Tpo $(DEPDIR)/test-matrix_add_scalar.Po
#	source='matrix_add_scalar.cpp' object='test-matrix_add_scalar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_add_scalar.obj `if test -f 'matrix_add_scalar.cpp'; then $(CYGPATH_W) 'matrix_add_scalar.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_add_scalar.cpp'; fi`

test-matrix_det.o: matrix_det.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_det.o -MD -MP -MF $(DEPDIR)/test-matrix_det.Tpo -c -o test-matrix_det.o `test -f 'matrix_det.cpp' || echo '$(srcdir)/'`matrix_det.cpp
	mv -f $(DEPDIR)/test-matrix_det.Tpo $(DEPDIR)/test-matrix_det.Po
#	source='matrix_det.cpp' object='test-matrix_det.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_det.o `test -f 'matrix_det.cpp' || echo '$(srcdir)/'`matrix_det.cpp

test-matrix_det.obj: matrix_det.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_det.obj -MD -MP -MF $(DEPDIR)/test-matrix_det.Tpo -c -o test-matrix_det.obj `if test -f 'matrix_det.cpp'; then $(CYGPATH_W) 'matrix_det.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_det.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_det.Tpo $(DEPDIR)/test-matrix_det.Po
#	source='matrix_det.cpp' object='test-matrix_det.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_det.obj `if test -f 'matrix_det.cpp'; then $(CYGPATH_W) 'matrix_det.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_det.cpp'; fi`

test-matrix_det_int.o: matrix_det_int.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_det_int.o -MD -MP -MF $(DEPDIR)/test-matrix_det_int.Tpo -c -o test-matrix_det_int.o `test -f 'matrix_det_int.cpp' || echo '$(srcdir)/'`matrix_det_int.cpp
	mv -f $(DEPDIR)/test-matrix_det_int.Tpo $(DEPDIR)/test-matrix_det_int.Po
#	source='matrix_det_int.cpp' object='test-matrix_det_int.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_det_int.o `test -f 'matrix_det_int.cpp' || echo '$(srcdir)/'`matrix_det_int.cpp

test-matrix_det_int.obj: matrix_det_int.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_det_int.obj -MD -MP -MF $(DEPDIR)/test-matrix_det_int.Tpo -c -o test-matrix_det_int.obj `if test -f 'matrix_det_int.cpp'; then $(CYGPATH_W) 'matrix_det_int.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_det_int.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_det_int.Tpo $(DEPDIR)/test-matrix_det_int.Po
#	source='matrix_det_int.cpp' object='test-matrix_det_int.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_det_int.obj `if test -f 'matrix_det_int.cpp'; then $(CYGPATH_W) 'matrix_det_int.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_det_int.cpp'; fi`

test-matrix_insert_col.o: matrix_insert_col.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_insert_col.o -MD -MP -MF $(DEPDIR)/test-matrix_insert_col.Tpo -c -o test-matrix_insert_col.o `test -f 'matrix_insert_col.cpp' || echo '$(srcdir)/'`matrix_insert_col.cpp
	mv -f $(DEPDIR)/test-matrix_insert_col.Tpo $(DEPDIR)/test-matrix_insert_col.Po
#	source='matrix_insert_col.cpp' object='test-matrix_insert_col.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_insert_col.o `test -f 'matrix_insert_col.cpp' || echo '$(srcdir)/'`matrix_insert_col.cpp

test-matrix_insert_col.obj: matrix_insert_col.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_insert_col.obj -MD -MP -MF $(DEPDIR)/test-matrix_insert_col.Tpo -c -o test-matrix_insert_col.obj `if test -f 'matrix_insert_col.cpp'; then $(CYGPATH_W) 'matrix_insert_col.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_insert_col.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_insert_col.Tpo $(DEPDIR)/test-matrix_insert_col.Po
#	source='matrix_insert_col.cpp' object='test-matrix_insert_col.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_insert_col.obj `if test -f 'matrix_insert_col.cpp'; then $(CYGPATH_W) 'matrix_insert_col.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_insert_col.cpp'; fi`

test-matrix_insert_row.o: matrix_insert_row.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_insert_row.o -MD -MP -MF $(DEPDIR)/test-matrix_insert_row.Tpo -c -o test-matrix_insert_row.o `test -f 'matrix_insert_row.cpp' || echo '$(srcdir)/'`matrix_insert_row.cpp
	mv -f $(DEPDIR)/test-matrix_insert_row.Tpo $(DEPDIR)/test-matrix_insert_row.Po
#	source='matrix_insert_row.cpp' object='test-matrix_insert_row.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_insert_row.o `test -f 'matrix_insert_row.cpp' || echo '$(srcdir)/'`matrix_insert_row.cpp

test-matrix_insert_row.obj: matrix_insert_row.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_insert_row.obj -MD -MP -MF $(DEPDIR)/test-matrix_insert_row.Tpo -c -o test-matrix_insert_row.obj `if test -f 'matrix_insert_row.cpp'; then $(CYGPATH_W) 'matrix_insert_row.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_insert_row.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_insert_row.Tpo $(DEPDIR)/test-matrix_insert_row.Po
#	source='matrix_insert_row.cpp' object='test-matrix_insert_row.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_insert_row.obj `if test -f 'matrix_insert_row.cpp'; then $(CYGPATH_W) 'matrix_insert_row.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_insert_row.cpp'; fi`

test-matrix_inverse.o: matrix_inverse.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_inverse.o -MD -MP -MF $(DEPDIR)/test-matrix_inverse.Tpo -c -o test-matrix_inverse.o `test -f 'matrix_inverse.cpp' || echo '$(srcdir)/'`matrix_inverse.cpp
	mv -f $(DEPDIR)/test-matrix_inverse.Tpo $(DEPDIR)/test-matrix_inverse.Po
#	source='matrix_inverse.cpp' object='test-matrix_inverse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_inverse.o `test -f 'matrix_inverse.cpp' || echo '$(srcdir)/'`matrix_inverse.cpp

test-matrix_inverse.obj: matrix_inverse.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_inverse.obj -MD -MP -MF $(DEPDIR)/test-matrix_inverse.Tpo -c -o test-matrix_inverse.obj `if test -f 'matrix_inverse.cpp'; then $(CYGPATH_W) 'matrix_inverse.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_inverse.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_inverse.Tpo $(DEPDIR)/test-matrix_inverse.Po
#	source='matrix_inverse.cpp' object='test-matrix_inverse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_inverse.obj `if test -f 'matrix_inverse.cpp'; then $(CYGPATH_W) 'matrix_inverse.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_inverse.cpp'; fi`

test-matrix_io_binary.o: matrix_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_io_binary.o -MD -MP -MF $(DEPDIR)/test-matrix_io_binary.Tpo -c -o test-matrix_io_binary.o `test -f 'matrix_io_binary.cpp' || echo '$(srcdir)/'`matrix_io_binary.cpp
	mv -f $(DEPDIR)/test-matrix_io_binary.Tpo $(DEPDIR)/test-matrix_io_binary.Po
#	source='matrix_io_binary.cpp' object='test-matrix_io_binary.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_io_binary.o `test -f 'matrix_io_binary.cpp' || echo '$(srcdir)/'`matrix_io_binary.cpp

test-matrix_io_binary.obj: matrix_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_io_binary.obj -MD -MP -MF $(DEPDIR)/test-matrix_io_binary.Tpo -c -o test-matrix_io_binary.obj `if test -f 'matrix_io_binary.cpp'; then $(CYGPATH_W) 'matrix_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_io_binary.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_io_binary.Tpo $(DEPDIR)/test-matrix_io_binary.Po
#	source='matrix_io_binary.cpp' object='test-matrix_io_binary.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_io_binary.obj `if test -f 'matrix_io_binary.cpp'; then $(CYGPATH_W) 'matrix_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_io_binary.cpp'; fi`

test-matrix_is_null.o: matrix_is_null.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_is_null.o -MD -MP -MF $(DEPDIR)/test-matrix_is_null.Tpo -c -o test-matrix_is_null.o `test -f 'matrix_is_null.cpp' || echo '$(srcdir)/'`matrix_is_null.cpp
	mv -f $(DEPDIR)/test-matrix_is_null.Tpo $(DEPDIR)/test-matrix_is_null.Po
#	source='matrix_is_null.cpp' object='test-matrix_is_null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_is_null.o `test -f 'matrix_is_null.cpp' || echo '$(srcdir)/'`matrix_is_null.cpp

test-matrix_is_null.obj: matrix_is_null.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_is_null.obj -MD -MP -MF $(DEPDIR)/test-matrix_is_null.Tpo -c -o test-matrix_is_null.obj `if test -f 'matrix_is_null.cpp'; then $(CYGPATH_W) 'matrix_is_null.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_is_null.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_is_null.Tpo $(DEPDIR)/test-matrix_is_null.Po
#	source='matrix_is_null.cpp' object='test-matrix_is_null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_is_null.obj `if test -f 'matrix_is_null.cpp'; then $(CYGPATH_W) 'matrix_is_null.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_is_null.cpp'; fi`

test-matrix_is_square.o: matrix_is_square.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_is_square.o -MD -MP -MF $(DEPDIR)/test-matrix_is_square.Tpo -c -o test-matrix_is_square.o `test -f 'matrix_is_square.cpp' || echo '$(srcdir)/'`matrix_is_square.cpp
	mv -f $(DEPDIR)/test-matrix_is_square.Tpo $(DEPDIR)/test-matrix_is_square.Po
#	source='matrix_is_square.cpp' object='test-matrix_is_square.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_is_square.o `test -f 'matrix_is_square.cpp' || echo '$(srcdir)/'`matrix_is_square.cpp

test-matrix_is_square.obj: matrix_is_square.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_is_square.obj -MD -MP -MF $(DEPDIR)/test-matrix_is_square.Tpo -c -o test-matrix_is_square.obj `if test -f 'matrix_is_square.cpp'; then $(CYGPATH_W) 'matrix_is_square.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_is_square.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_is_square.Tpo $(DEPDIR)/test-matrix_is_square.Po
#	source='matrix_is_square.cpp' object='test-matrix_is_square.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_is_square.obj `if test -f 'matrix_is_square.cpp'; then $(CYGPATH_W) 'matrix_is_square.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_is_square.cpp'; fi`

test-matrix_is_unit.o: matrix_is_unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_is_unit.o -MD -MP -MF $(DEPDIR)/test-matrix_is_unit.Tpo -c -o test-matrix_is_unit.o `test -f 'matrix_is_unit.cpp' || echo '$(srcdir)/'`matrix_is_unit.cpp
	mv -f $(DEPDIR)/test-matrix_is_unit.Tpo $(DEPDIR)/test-matrix_is_unit.Po
#	source='matrix_is_unit.cpp' object='test-matrix_is_unit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_is_unit.o `test -f 'matrix_is_unit.cpp' || echo '$(srcdir)/'`matrix_is_unit.cpp

test-matrix_is_unit.obj: matrix_is_unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_is_unit.obj -MD -MP -MF $(DEPDIR)/test-matrix_is_unit.Tpo -c -o test-matrix_is_unit.obj `if test -f 'matrix_is_unit.cpp'; then $(CYGPATH_W) 'matrix_is_unit.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_is_unit.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_is_unit.Tpo $(DEPDIR)/test-matrix_is_unit.Po
#	source='matrix_is_unit.cpp' object='test-matrix_is_unit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_is_unit.obj `if test -f 'matrix_is_unit.cpp'; then $(CYGPATH_W) 'matrix_is_unit.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_is_unit.cpp'; fi`

test-matrix_matrix_add.o: matrix_matrix_add.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_matrix_add.o -MD -MP -MF $(DEPDIR)/test-matrix_matrix_add.Tpo -c -o test-matrix_matrix_add.o `test -f 'matrix_matrix_add.cpp' || echo '$(srcdir)/'`matrix_matrix_add.cpp
	mv -f $(DEPDIR)/test-matrix_matrix_add.Tpo $(DEPDIR)/test-matrix_matrix_add.Po
#	source='matrix_matrix_add.cpp' object='test-matrix_matrix_add.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_matrix_add.o `test -f 'matrix_matrix_add.cpp' || echo '$(srcdir)/'`matrix_matrix_add.cpp

test-matrix_matrix_add.obj: matrix_matrix_add.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_matrix_add.obj -MD -MP -MF $(DEPDIR)/test-matrix_matrix_add.Tpo -c -o test-matrix_matrix_add.obj `if test -f 'matrix_matrix_add.cpp'; then $(CYGPATH_W) 'matrix_matrix_add.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_matrix_add.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_matrix_add.Tpo $(DEPDIR)/test-matrix_matrix_add.Po
#	source='matrix_matrix_add.cpp' object='test-matrix_matrix_add.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_matrix_add.obj `if test -f 'matrix_matrix_add.cpp'; then $(CYGPATH_W) 'matrix_matrix_add.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_matrix_add.cpp'; fi`

test-matrix_matrix_mult.o: matrix_matrix_mult.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_matrix_mult.o -MD -MP -MF $(DEPDIR)/test-matrix_matrix_mult.Tpo -c -o test-matrix_matrix_mult.o `test -f 'matrix_matrix_mult.cpp' || echo '$(srcdir)/'`matrix_matrix_mult.cpp
	mv -f $(DEPDIR)/test-matrix_matrix_mult.Tpo $(DEPDIR)/test-matrix_matrix_mult.Po
#	source='matrix_matrix_mult.cpp' object='test-matrix_matrix_mult.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_matrix_mult.o `test -f 'matrix_matrix_mult.cpp' || echo '$(srcdir)/'`matrix_matrix_mult.cpp

test-matrix_matrix_mult.obj: matrix_matrix_mult.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_matrix_mult.obj -MD -MP -MF $(DEPDIR)/test-matrix_matrix_mult.Tpo -c -o test-matrix_matrix_mult.obj `if test -f 'matrix_matrix_mult.cpp'; then $(CYGPATH_W) 'matrix_matrix_mult.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_matrix_mult.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_matrix_mult.Tpo $(DEPDIR)/test-matrix_matrix_mult.Po
#	source='matrix_matrix_mult.cpp' object='test-matrix_matrix_mult.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_matrix_mult.obj `if test -f 'matrix_matrix_mult.cpp'; then $(CYGPATH_W) 'matrix_matrix_mult.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_matrix_mult.cpp'; fi`

test-matrix_mul_scalar.o: matrix_mul_scalar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_mul_scalar.o -MD -MP -MF $(DEPDIR)/test-matrix_mul_scalar.Tpo -c -o test-matrix_mul_scalar.o `test -f 'matrix_mul_scalar.cpp' || echo '$(srcdir)/'`matrix_mul_scalar.cpp
	mv -f $(DEPDIR)/test-matrix_mul_scalar.Tpo $(DEPDIR)/test-matrix_mul_scalar.Po
#	source='matrix_mul_scalar.cpp' object='test-matrix_mul_scalar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_mul_scalar.o `test -f 'matrix_mul_scalar.cpp' || echo '$(srcdir)/'`matrix_mul_scalar.cpp

test-matrix_mul_scalar.obj: matrix_mul_scalar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_mul_scalar.obj -MD -MP -MF $(DEPDIR)/test-matrix_mul_scalar.Tpo -c -o test-matrix_mul_scalar.obj `if test -f 'matrix_mul_scalar.cpp'; then $(CYGPATH_W) 'matrix_mul_scalar.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_mul_scalar.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_mul_scalar.Tpo $(DEPDIR)/test-matrix_mul_scalar.Po
#	source='matrix_mul_scalar.cpp' object='test-matrix_mul_scalar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_mul_scalar.obj `if test -f 'matrix_mul_scalar.cpp'; then $(CYGPATH_W) 'matrix_mul_scalar.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_mul_scalar.cpp'; fi`

test-matrix_mult_col.o: matrix_mult_col.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_mult_col.o -MD -MP -MF $(DEPDIR)/test-matrix_mult_col.Tpo -c -o test-matrix_mult_col.o `test -f 'matrix_mult_col.cpp' || echo '$(srcdir)/'`matrix_mult_col.cpp
	mv -f $(DEPDIR)/test-matrix_mult_col.Tpo $(DEPDIR)/test-matrix_mult_col.Po
#	source='matrix_mult_col.cpp' object='test-matrix_mult_col.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_mult_col.o `test -f 'matrix_mult_col.cpp' || echo '$(srcdir)/'`matrix_mult_col.cpp

test-matrix_mult_col.obj: matrix_mult_col.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_mult_col.obj -MD -MP -MF $(DEPDIR)/test-matrix_mult_col.Tpo -c -o test-matrix_mult_col.obj `if test -f 'matrix_mult_col.cpp'; then $(CYGPATH_W) 'matrix_mult_col.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_mult_col.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_mult_col.Tpo $(DEPDIR)/test-matrix_mult_col.Po
#	source='matrix_mult_col.cpp' object='test-matrix_mult_col.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_mult_col.obj `if test -f 'matrix_mult_col.cpp'; then $(CYGPATH_W) 'matrix_mult_col.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_mult_col.cpp'; fi`

test-matrix_mult_row.o: matrix_mult_row.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_mult_row.o -MD -MP -MF $(DEPDIR)/test-matrix_mult_row.Tpo -c -o test-matrix_mult_row.o `test -f 'matrix_mult_row.cpp' || echo '$(srcdir)/'`matrix_mult_row.cpp
	mv -f $(DEPDIR)/test-matrix_mult_row.Tpo $(DEPDIR)/test-matrix_mult_row.Po
#	source='matrix_mult_row.cpp' object='test-matrix_mult_row.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_mult_row.o `test -f 'matrix_mult_row.cpp' || echo '$(srcdir)/'`matrix_mult_row.cpp

test-matrix_mult_row.obj: matrix_mult_row.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_mult_row.obj -MD -MP -MF $(DEPDIR)/test-matrix_mult_row.Tpo -c -o test-matrix_mult_row.obj `if test -f 'matrix_mult_row.cpp'; then $(CYGPATH_W) 'matrix_mult_row.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_mult_row.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_mult_row.Tpo $(DEPDIR)/test-matrix_mult_row.Po
#	source='matrix_mult_row.cpp' object='test-matrix_mult_row.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_mult_row.obj `if test -f 'matrix_mult_row.cpp'; then $(CYGPATH_W) 'matrix_mult_row.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_mult_row.cpp'; fi`

test-matrix_opposite.o: matrix_opposite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_opposite.o -MD -MP -MF $(DEPDIR)/test-matrix_opposite.Tpo -c -o test-matrix_opposite.o `test -f 'matrix_opposite.cpp' || echo '$(srcdir)/'`matrix_opposite.cpp
	mv -f $(DEPDIR)/test-matrix_opposite.Tpo $(DEPDIR)/test-matrix_opposite.Po
#	source='matrix_opposite.cpp' object='test-matrix_opposite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_opposite.o `test -f 'matrix_opposite.cpp' || echo '$(srcdir)/'`matrix_opposite.cpp

test-matrix_opposite.obj: matrix_opposite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_opposite.obj -MD -MP -MF $(DEPDIR)/test-matrix_opposite.Tpo -c -o test-matrix_opposite.obj `if test -f 'matrix_opposite.cpp'; then $(CYGPATH_W) 'matrix_opposite.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_opposite.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_opposite.Tpo $(DEPDIR)/test-matrix_opposite.Po
#	source='matrix_opposite.cpp' object='test-matrix_opposite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_opposite.obj `if test -f 'matrix_opposite.cpp'; then $(CYGPATH_W) 'matrix_opposite.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_opposite.cpp'; fi`

test-matrix_ops.o: matrix_ops.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_ops.o -MD -MP -MF $(DEPDIR)/test-matrix_ops.Tpo -c -o test-matrix_ops.o `test -f 'matrix_ops.cpp' || echo '$(srcdir)/'`matrix_ops.cpp
	mv -f $(DEPDIR)/test-matrix_ops.Tpo $(DEPDIR)/test-matrix_ops.Po
#	source='matrix_ops.cpp' object='test-matrix_ops.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_ops.o `test -f 'matrix_ops.cpp' || echo '$(srcdir)/'`matrix_ops.cpp

test-matrix_ops.obj: matrix_ops.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_ops.obj -MD -MP -MF $(DEPDIR)/test-matrix_ops.Tpo -c -o test-matrix_ops.obj `if test -f 'matrix_ops.cpp'; then $(CYGPATH_W) 'matrix_ops.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_ops.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_ops.Tpo $(DEPDIR)/test-matrix_ops.Po
#	source='matrix_ops.cpp' object='test-matrix_ops.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_ops.obj `if test -f 'matrix_ops.cpp'; then $(CYGPATH_W) 'matrix_ops.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_ops.cpp'; fi`

test-matrix_string_constructor.o: matrix_string_constructor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_string_constructor.o -MD -MP -MF $(DEPDIR)/test-matrix_string_constructor.Tpo -c -o test-matrix_string_constructor.o `test -f 'matrix_string_constructor.cpp' || echo '$(srcdir)/'`matrix_string_constructor.cpp
	mv -f $(DEPDIR)/test-matrix_string_constructor.Tpo $(DEPDIR)/test-matrix_string_constructor.Po
#	source='matrix_string_constructor.cpp' object='test-matrix_string_constructor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_string_constructor.o `test -f 'matrix_string_constructor.cpp' || echo '$(srcdir)/'`matrix_string_constructor.cpp

test-matrix_string_constructor.obj: matrix_string_constructor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_string_constructor.obj -MD -MP -MF $(DEPDIR)/test-matrix_string_constructor.Tpo -c -o test-matrix_string_constructor.obj `if test -f 'matrix_string_constructor.cpp'; then $(CYGPATH_W) 'matrix_string_constructor.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_string_constructor.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_string_constructor.Tpo $(DEPDIR)/test-matrix_string_constructor.Po
#	source='matrix_string_constructor.cpp' object='test-matrix_string_constructor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_string_constructor.obj `if test -f 'matrix_string_constructor.cpp'; then $(CYGPATH_W) 'matrix_string_constructor.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_string_constructor.cpp'; fi`

test-matrix_swap_col.o: matrix_swap_col.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_swap_col.o -MD -MP -MF $(DEPDIR)/test-matrix_swap_col.Tpo -c -o test-matrix_swap_col.o `test -f 'matrix_swap_col.cpp' || echo '$(srcdir)/'`matrix_swap_col.cpp
	mv -f $(DEPDIR)/test-matrix_swap_col.Tpo $(DEPDIR)/test-matrix_swap_col.Po
#	source='matrix_swap_col.cpp' object='test-matrix_swap_col.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_swap_col.o `test -f 'matrix_swap_col.cpp' || echo '$(srcdir)/'`matrix_swap_col.cpp

test-matrix_swap_col.obj: matrix_swap_col.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_swap_col.obj -MD -MP -MF $(DEPDIR)/test-matrix_swap_col.Tpo -c -o test-matrix_swap_col.obj `if test -f 'matrix_swap_col.cpp'; then $(CYGPATH_W) 'matrix_swap_col.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_swap_col.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_swap_col.Tpo $(DEPDIR)/test-matrix_swap_col.Po
#	source='matrix_swap_col.cpp' object='test-matrix_swap_col.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_swap_col.obj `if test -f 'matrix_swap_col.cpp'; then $(CYGPATH_W) 'matrix_swap_col.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_swap_col.cpp'; fi`

test-matrix_swap_row.o: matrix_swap_row.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_swap_row.o -MD -MP -MF $(DEPDIR)/test-matrix_swap_row.Tpo -c -o test-matrix_swap_row.o `test -f 'matrix_swap_row.cpp' || echo '$(srcdir)/'`matrix_swap_row.cpp
	mv -f $(DEPDIR)/test-matrix_swap_row.Tpo $(DEPDIR)/test-matrix_swap_row.Po
#	source='matrix_swap_row.cpp' object='test-matrix_swap_row.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_swap_row.o `test -f 'matrix_swap_row.cpp' || echo '$(srcdir)/'`matrix_swap_row.cpp

test-matrix_swap_row.obj: matrix_swap_row.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_swap_row.obj -MD -MP -MF $(DEPDIR)/test-matrix_swap_row.Tpo -c -o test-matrix_swap_row.obj `if test -f 'matrix_swap_row.cpp'; then $(CYGPATH_W) 'matrix_swap_row.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_swap_row.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_swap_row.Tpo $(DEPDIR)/test-matrix_swap_row.Po
#	source='matrix_swap_row.cpp' object='test-matrix_swap_row.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_swap_row.obj `if test -f 'matrix_swap_row.cpp'; then $(CYGPATH_W) 'matrix_swap_row.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_swap_row.cpp'; fi`

test-matrix_transpose.o: matrix_transpose.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_transpose.o -MD -MP -MF $(DEPDIR)/test-matrix_transpose.Tpo -c -o test-matrix_transpose.o `test -f 'matrix_transpose.cpp' || echo '$(srcdir)/'`matrix_transpose.cpp
	mv -f $(DEPDIR)/test-matrix_transpose.Tpo $(DEPDIR)/test-matrix_transpose.Po
#	source='matrix_transpose.cpp' object='test-matrix_transpose.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_transpose.o `test -f 'matrix_transpose.cpp' || echo '$(srcdir)/'`matrix_transpose.cpp

test-matrix_transpose.obj: matrix_transpose.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-matrix_transpose.obj -MD -MP -MF $(DEPDIR)/test-matrix_transpose.Tpo -c -o test-matrix_transpose.obj `if test -f 'matrix_transpose.cpp'; then $(CYGPATH_W) 'matrix_transpose.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_transpose.cpp'; fi`
	mv -f $(DEPDIR)/test-matrix_transpose.Tpo $(DEPDIR)/test-matrix_transpose.Po
#	source='matrix_transpose.cpp' object='test-matrix_transpose.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-matrix_transpose.obj `if test -f 'matrix_transpose.cpp'; then $(CYGPATH_W) 'matrix_transpose.cpp'; else $(CYGPATH_W) '$(srcdir)/matrix_transpose.cpp'; fi`

test-minkowski_diff.o: minkowski_diff.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-minkowski_diff.o -MD -MP -MF $(DEPDIR)/test-minkowski_diff.Tpo -c -o test-minkowski_diff.o `test -f 'minkowski_diff.cpp' || echo '$(srcdir)/'`minkowski_diff.cpp
	mv -f $(DEPDIR)/test-minkowski_diff.Tpo $(DEPDIR)/test-minkowski_diff.Po
#	source='minkowski_diff.cpp' object='test-minkowski_diff.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-minkowski_diff.o `test -f 'minkowski_diff.cpp' || echo '$(srcdir)/'`minkowski_diff.cpp

test-minkowski_diff.obj: minkowski_diff.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-minkowski_diff.obj -MD -MP -MF $(DEPDIR)/test-minkowski_diff.Tpo -c -o test-minkowski_diff.obj `if test -f 'minkowski_diff.cpp'; then $(CYGPATH_W) 'minkowski_diff.cpp'; else $(CYGPATH_W) '$(srcdir)/minkowski_diff.cpp'; fi`
	mv -f $(DEPDIR)/test-minkowski_diff.Tpo $(DEPDIR)/test-minkowski_diff.Po
#	source='minkowski_diff.cpp' object='test-minkowski_diff.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-minkowski_diff.obj `if test -f 'minkowski_diff.cpp'; then $(CYGPATH_W) 'minkowski_diff.cpp'; else $(CYGPATH_W) '$(srcdir)/minkowski_diff.cpp'; fi`

test-orthogonalization_generic_gram_schmidt.o: orthogonalization_generic_gram_schmidt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-orthogonalization_generic_gram_schmidt.o -MD -MP -MF $(DEPDIR)/test-orthogonalization_generic_gram_schmidt.Tpo -c -o test-orthogonalization_generic_gram_schmidt.o `test -f 'orthogonalization_generic_gram_schmidt.cpp' || echo '$(srcdir)/'`orthogonalization_generic_gram_schmidt.cpp
	mv -f $(DEPDIR)/test-orthogonalization_generic_gram_schmidt.Tpo $(DEPDIR)/test-orthogonalization_generic_gram_schmidt.Po
#	source='orthogonalization_generic_gram_schmidt.cpp' object='test-orthogonalization_generic_gram_schmidt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-orthogonalization_generic_gram_schmidt.o `test -f 'orthogonalization_generic_gram_schmidt.cpp' || echo '$(srcdir)/'`orthogonalization_generic_gram_schmidt.cpp

test-orthogonalization_generic_gram_schmidt.obj: orthogonalization_generic_gram_schmidt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-orthogonalization_generic_gram_schmidt.obj -MD -MP -MF $(DEPDIR)/test-orthogonalization_generic_gram_schmidt.Tpo -c -o test-orthogonalization_generic_gram_schmidt.obj `if test -f 'orthogonalization_generic_gram_schmidt.cpp'; then $(CYGPATH_W) 'orthogonalization_generic_gram_schmidt.cpp'; else $(CYGPATH_W) '$(srcdir)/orthogonalization_generic_gram_schmidt.cpp'; fi`
	mv -f $(DEPDIR)/test-orthogonalization_generic_gram_schmidt.Tpo $(DEPDIR)/test-orthogonalization_generic_gram_schmidt.Po
#	source='orthogonalization_generic_gram_schmidt.cpp' object='test-orthogonalization_generic_gram_schmidt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-orthogonalization_generic_gram_schmidt.obj `if test -f 'orthogonalization_generic_gram_schmidt.cpp'; then $(CYGPATH_W) 'orthogonalization_generic_gram_schmidt.cpp'; else $(CYGPATH_W) '$(srcdir)/orthogonalization_generic_gram_schmidt.cpp'; fi`

test-pollard_pm1.o: pollard_pm1.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-pollard_pm1.o -MD -MP -MF $(DEPDIR)/test-pollard_pm1.Tpo -c -o test-pollard_pm1.o `test -f 'pollard_pm1.cpp' || echo '$(srcdir)/'`pollard_pm1.cpp
	mv -f $(DEPDIR)/test-pollard_pm1.Tpo $(DEPDIR)/test-pollard_pm1.Po
#	source='pollard_pm1.cpp' object='test-pollard_pm1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-pollard_pm1.o `test -f 'pollard_pm1.cpp' || echo '$(srcdir)/'`pollard_pm1.cpp

test-pollard_pm1.obj: pollard_pm1.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-pollard_pm1.obj -MD -MP -MF $(DEPDIR)/test-pollard_pm1.Tpo -c -o test-pollard_pm1.obj `if test -f 'pollard_pm1.cpp'; then $(CYGPATH_W) 'pollard_pm1.cpp'; else $(CYGPATH_W) '$(srcdir)/pollard_pm1.cpp'; fi`
	mv -f $(DEPDIR)/test-pollard_pm1.Tpo $(DEPDIR)/test-pollard_pm1.Po
#	source='pollard_pm1.cpp' object='test-pollard_pm1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-pollard_pm1.obj `if test -f 'pollard_pm1.cpp'; then $(CYGPATH_W) 'pollard_pm1.cpp'; else $(CYGPATH_W) '$(srcdir)/pollard_pm1.cpp'; fi`

test-polyhedron_distance.o: polyhedron_distance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-polyhedron_distance.o -MD -MP -MF $(DEPDIR)/test-polyhedron_distance.Tpo -c -o test-polyhedron_distance.o `test -f 'polyhedron_distance.cpp' || echo '$(srcdir)/'`polyhedron_distance.cpp
	mv -f $(DEPDIR)/test-polyhedron_distance.Tpo $(DEPDIR)/test-polyhedron_distance.Po
#	source='polyhedron_distance.cpp' object='test-polyhedron_distance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-polyhedron_distance.o `test -f 'polyhedron_distance.cpp' || echo '$(srcdir)/'`polyhedron_distance.cpp

test-polyhedron_distance.obj: polyhedron_distance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-polyhedron_distance.obj -MD -MP -MF $(DEPDIR)/test-polyhedron_distance.Tpo -c -o test-polyhedron_distance.obj `if test -f 'polyhedron_distance.cpp'; then $(CYGPATH_W) 'polyhedron_distance.cpp'; else $(CYGPATH_W) '$(srcdir)/polyhedron_distance.cpp'; fi`
	mv -f $(DEPDIR)/test-polyhedron_distance.Tpo $(DEPDIR)/test-polyhedron_distance.Po
#	source='polyhedron_distance.cpp' object='test-polyhedron_distance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-polyhedron_distance.obj `if test -f 'polyhedron_distance.cpp'; then $(CYGPATH_W) 'polyhedron_distance.cpp'; else $(CYGPATH_W) '$(srcdir)/polyhedron_distance.cpp'; fi`

test-polynom_init_convert.o: polynom_init_convert.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-polynom_init_convert.o -MD -MP -MF $(DEPDIR)/test-polynom_init_convert.Tpo -c -o test-polynom_init_convert.o `test -f 'polynom_init_convert.cpp' || echo '$(srcdir)/'`polynom_init_convert.cpp
	mv -f $(DEPDIR)/test-polynom_init_convert.Tpo $(DEPDIR)/test-polynom_init_convert.Po
#	source='polynom_init_convert.cpp' object='test-polynom_init_convert.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-polynom_init_convert.o `test -f 'polynom_init_convert.cpp' || echo '$(srcdir)/'`polynom_init_convert.cpp

test-polynom_init_convert.obj: polynom_init_convert.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-polynom_init_convert.obj -MD -MP -MF $(DEPDIR)/test-polynom_init_convert.Tpo -c -o test-polynom_init_convert.obj `if test -f 'polynom_init_convert.cpp'; then $(CYGPATH_W) 'polynom_init_convert.cpp'; else $(CYGPATH_W) '$(srcdir)/polynom_init_convert.cpp'; fi`
	mv -f $(DEPDIR)/test-polynom_init_convert.Tpo $(DEPDIR)/test-polynom_init_convert.Po
#	source='polynom_init_convert.cpp' object='test-polynom_init_convert.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-polynom_init_convert.obj `if test -f 'polynom_init_convert.cpp'; then $(CYGPATH_W) 'polynom_init_convert.cpp'; else $(CYGPATH_W) '$(srcdir)/polynom_init_convert.cpp'; fi`

test-polynom_io_binary.o: polynom_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-polynom_io_binary.o -MD -MP -MF $(DEPDIR)/test-polynom_io_binary.Tpo -c -o test-polynom_io_binary.o `test -f 'polynom_io_binary.cpp' || echo '$(srcdir)/'`polynom_io_binary.cpp
	mv -f $(DEPDIR)/test-polynom_io_binary.Tpo $(DEPDIR)/test-polynom_io_binary.Po
#	source='polynom_io_binary.cpp' object='test-polynom_io_binary.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-polynom_io_binary.o `test -f 'polynom_io_binary.cpp' || echo '$(srcdir)/'`polynom_io_binary.cpp

test-polynom_io_binary.obj: polynom_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-polynom_io_binary.obj -MD -MP -MF $(DEPDIR)/test-polynom_io_binary.Tpo -c -o test-polynom_io_binary.obj `if test -f 'polynom_io_binary.cpp'; then $(CYGPATH_W) 'polynom_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/polynom_io_binary.cpp'; fi`
	mv -f $(DEPDIR)/test-polynom_io_binary.Tpo $(DEPDIR)/test-polynom_io_binary.Po
#	source='polynom_io_binary.cpp' object='test-polynom_io_binary.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-polynom_io_binary.obj `if test -f 'polynom_io_binary.cpp'; then $(CYGPATH_W) 'polynom_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/polynom_io_binary.cpp'; fi`

test-prime_miller_rabin.o: prime_miller_rabin.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-prime_miller_rabin.o -MD -MP -MF $(DEPDIR)/test-prime_miller_rabin.Tpo -c -o test-prime_miller_rabin.o `test -f 'prime_miller_rabin.cpp' || echo '$(srcdir)/'`prime_miller_rabin.cpp
	mv -f $(DEPDIR)/test-prime_miller_rabin.Tpo $(DEPDIR)/test-prime_miller_rabin.Po
#	source='prime_miller_rabin.cpp' object='test-prime_miller_rabin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-prime_miller_rabin.o `test -f 'prime_miller_rabin.cpp' || echo '$(srcdir)/'`prime_miller_rabin.cpp

test-prime_miller_rabin.obj: prime_miller_rabin.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-prime_miller_rabin.obj -MD -MP -MF $(DEPDIR)/test-prime_miller_rabin.Tpo -c -o test-prime_miller_rabin.obj `if test -f 'prime_miller_rabin.cpp'; then $(CYGPATH_W) 'prime_miller_rabin.cpp'; else $(CYGPATH_W) '$(srcdir)/prime_miller_rabin.cpp'; fi`
	mv -f $(DEPDIR)/test-prime_miller_rabin.Tpo $(DEPDIR)/test-prime_miller_rabin.Po
#	source='prime_miller_rabin.cpp' object='test-prime_miller_rabin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-prime_miller_rabin.obj `if test -f 'prime_miller_rabin.cpp'; then $(CYGPATH_W) 'prime_miller_rabin.cpp'; else $(CYGPATH_W) '$(srcdir)/prime_miller_rabin.cpp'; fi`

test-rand.o: rand.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rand.o -MD -MP -MF $(DEPDIR)/test-rand.Tpo -c -o test-rand.o `test -f 'rand.cpp' || echo '$(srcdir)/'`rand.cpp
	mv -f $(DEPDIR)/test-rand.Tpo $(DEPDIR)/test-rand.Po
#	source='rand.cpp' object='test-rand.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rand.o `test -f 'rand.cpp' || echo '$(srcdir)/'`rand.cpp

test-rand.obj: rand.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rand.obj -MD -MP -MF $(DEPDIR)/test-rand.Tpo -c -o test-rand.obj `if test -f 'rand.cpp'; then $(CYGPATH_W) 'rand.cpp'; else $(CYGPATH_W) '$(srcdir)/rand.cpp'; fi`
	mv -f $(DEPDIR)/test-rand.Tpo $(DEPDIR)/test-rand.Po
#	source='rand.cpp' object='test-rand.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rand.obj `if test -f 'rand.cpp'; then $(CYGPATH_W) 'rand.cpp'; else $(CYGPATH_W) '$(srcdir)/rand.cpp'; fi`

test-rational_compares.o: rational_compares.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_compares.o -MD -MP -MF $(DEPDIR)/test-rational_compares.Tpo -c -o test-rational_compares.o `test -f 'rational_compares.cpp' || echo '$(srcdir)/'`rational_compares.cpp
	mv -f $(DEPDIR)/test-rational_compares.Tpo $(DEPDIR)/test-rational_compares.Po
#	source='rational_compares.cpp' object='test-rational_compares.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_compares.o `test -f 'rational_compares.cpp' || echo '$(srcdir)/'`rational_compares.cpp

test-rational_compares.obj: rational_compares.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_compares.obj -MD -MP -MF $(DEPDIR)/test-rational_compares.Tpo -c -o test-rational_compares.obj `if test -f 'rational_compares.cpp'; then $(CYGPATH_W) 'rational_compares.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_compares.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_compares.Tpo $(DEPDIR)/test-rational_compares.Po
#	source='rational_compares.cpp' object='test-rational_compares.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_compares.obj `if test -f 'rational_compares.cpp'; then $(CYGPATH_W) 'rational_compares.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_compares.cpp'; fi`

test-rational_constructor.o: rational_constructor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_constructor.o -MD -MP -MF $(DEPDIR)/test-rational_constructor.Tpo -c -o test-rational_constructor.o `test -f 'rational_constructor.cpp' || echo '$(srcdir)/'`rational_constructor.cpp
	mv -f $(DEPDIR)/test-rational_constructor.Tpo $(DEPDIR)/test-rational_constructor.Po
#	source='rational_constructor.cpp' object='test-rational_constructor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_constructor.o `test -f 'rational_constructor.cpp' || echo '$(srcdir)/'`rational_constructor.cpp

test-rational_constructor.obj: rational_constructor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_constructor.obj -MD -MP -MF $(DEPDIR)/test-rational_constructor.Tpo -c -o test-rational_constructor.obj `if test -f 'rational_constructor.cpp'; then $(CYGPATH_W) 'rational_constructor.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_constructor.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_constructor.Tpo $(DEPDIR)/test-rational_constructor.Po
#	source='rational_constructor.cpp' object='test-rational_constructor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_constructor.obj `if test -f 'rational_constructor.cpp'; then $(CYGPATH_W) 'rational_constructor.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_constructor.cpp'; fi`

test-rational.o: rational.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational.o -MD -MP -MF $(DEPDIR)/test-rational.Tpo -c -o test-rational.o `test -f 'rational.cpp' || echo '$(srcdir)/'`rational.cpp
	mv -f $(DEPDIR)/test-rational.Tpo $(DEPDIR)/test-rational.Po
#	source='rational.cpp' object='test-rational.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational.o `test -f 'rational.cpp' || echo '$(srcdir)/'`rational.cpp

test-rational.obj: rational.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational.obj -MD -MP -MF $(DEPDIR)/test-rational.Tpo -c -o test-rational.obj `if test -f 'rational.cpp'; then $(CYGPATH_W) 'rational.cpp'; else $(CYGPATH_W) '$(srcdir)/rational.cpp'; fi`
	mv -f $(DEPDIR)/test-rational.Tpo $(DEPDIR)/test-rational.Po
#	source='rational.cpp' object='test-rational.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational.obj `if test -f 'rational.cpp'; then $(CYGPATH_W) 'rational.cpp'; else $(CYGPATH_W) '$(srcdir)/rational.cpp'; fi`

test-rational_ifloor_iceil_frac_abs.o: rational_ifloor_iceil_frac_abs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_ifloor_iceil_frac_abs.o -MD -MP -MF $(DEPDIR)/test-rational_ifloor_iceil_frac_abs.Tpo -c -o test-rational_ifloor_iceil_frac_abs.o `test -f 'rational_ifloor_iceil_frac_abs.cpp' || echo '$(srcdir)/'`rational_ifloor_iceil_frac_abs.cpp
	mv -f $(DEPDIR)/test-rational_ifloor_iceil_frac_abs.Tpo $(DEPDIR)/test-rational_ifloor_iceil_frac_abs.Po
#	source='rational_ifloor_iceil_frac_abs.cpp' object='test-rational_ifloor_iceil_frac_abs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_ifloor_iceil_frac_abs.o `test -f 'rational_ifloor_iceil_frac_abs.cpp' || echo '$(srcdir)/'`rational_ifloor_iceil_frac_abs.cpp

test-rational_ifloor_iceil_frac_abs.obj: rational_ifloor_iceil_frac_abs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_ifloor_iceil_frac_abs.obj -MD -MP -MF $(DEPDIR)/test-rational_ifloor_iceil_frac_abs.Tpo -c -o test-rational_ifloor_iceil_frac_abs.obj `if test -f 'rational_ifloor_iceil_frac_abs.cpp'; then $(CYGPATH_W) 'rational_ifloor_iceil_frac_abs.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_ifloor_iceil_frac_abs.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_ifloor_iceil_frac_abs.Tpo $(DEPDIR)/test-rational_ifloor_iceil_frac_abs.Po
#	source='rational_ifloor_iceil_frac_abs.cpp' object='test-rational_ifloor_iceil_frac_abs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_ifloor_iceil_frac_abs.obj `if test -f 'rational_ifloor_iceil_frac_abs.cpp'; then $(CYGPATH_W) 'rational_ifloor_iceil_frac_abs.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_ifloor_iceil_frac_abs.cpp'; fi`

test-rational_inverse.o: rational_inverse.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_inverse.o -MD -MP -MF $(DEPDIR)/test-rational_inverse.Tpo -c -o test-rational_inverse.o `test -f 'rational_inverse.cpp' || echo '$(srcdir)/'`rational_inverse.cpp
	mv -f $(DEPDIR)/test-rational_inverse.Tpo $(DEPDIR)/test-rational_inverse.Po
#	source='rational_inverse.cpp' object='test-rational_inverse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_inverse.o `test -f 'rational_inverse.cpp' || echo '$(srcdir)/'`rational_inverse.cpp

test-rational_inverse.obj: rational_inverse.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_inverse.obj -MD -MP -MF $(DEPDIR)/test-rational_inverse.Tpo -c -o test-rational_inverse.obj `if test -f 'rational_inverse.cpp'; then $(CYGPATH_W) 'rational_inverse.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_inverse.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_inverse.Tpo $(DEPDIR)/test-rational_inverse.Po
#	source='rational_inverse.cpp' object='test-rational_inverse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_inverse.obj `if test -f 'rational_inverse.cpp'; then $(CYGPATH_W) 'rational_inverse.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_inverse.cpp'; fi`

test-rational_io_binary.o: rational_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_io_binary.o -MD -MP -MF $(DEPDIR)/test-rational_io_binary.Tpo -c -o test-rational_io_binary.o `test -f 'rational_io_binary.cpp' || echo '$(srcdir)/'`rational_io_binary.cpp
	mv -f $(DEPDIR)/test-rational_io_binary.Tpo $(DEPDIR)/test-rational_io_binary.Po
#	source='rational_io_binary.cpp' object='test-rational_io_binary.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_io_binary.o `test -f 'rational_io_binary.cpp' || echo '$(srcdir)/'`rational_io_binary.cpp

test-rational_io_binary.obj: rational_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_io_binary.obj -MD -MP -MF $(DEPDIR)/test-rational_io_binary.Tpo -c -o test-rational_io_binary.obj `if test -f 'rational_io_binary.cpp'; then $(CYGPATH_W) 'rational_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_io_binary.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_io_binary.Tpo $(DEPDIR)/test-rational_io_binary.Po
#	source='rational_io_binary.cpp' object='test-rational_io_binary.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_io_binary.obj `if test -f 'rational_io_binary.cpp'; then $(CYGPATH_W) 'rational_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_io_binary.cpp'; fi`

test-rational_is_integer.o: rational_is_integer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_is_integer.o -MD -MP -MF $(DEPDIR)/test-rational_is_integer.Tpo -c -o test-rational_is_integer.o `test -f 'rational_is_integer.cpp' || echo '$(srcdir)/'`rational_is_integer.cpp
	mv -f $(DEPDIR)/test-rational_is_integer.Tpo $(DEPDIR)/test-rational_is_integer.Po
#	source='rational_is_integer.cpp' object='test-rational_is_integer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_is_integer.o `test -f 'rational_is_integer.cpp' || echo '$(srcdir)/'`rational_is_integer.cpp

test-rational_is_integer.obj: rational_is_integer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_is_integer.obj -MD -MP -MF $(DEPDIR)/test-rational_is_integer.Tpo -c -o test-rational_is_integer.obj `if test -f 'rational_is_integer.cpp'; then $(CYGPATH_W) 'rational_is_integer.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_is_integer.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_is_integer.Tpo $(DEPDIR)/test-rational_is_integer.Po
#	source='rational_is_integer.cpp' object='test-rational_is_integer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_is_integer.obj `if test -f 'rational_is_integer.cpp'; then $(CYGPATH_W) 'rational_is_integer.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_is_integer.cpp'; fi`

test-rational_is_normal.o: rational_is_normal.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_is_normal.o -MD -MP -MF $(DEPDIR)/test-rational_is_normal.Tpo -c -o test-rational_is_normal.o `test -f 'rational_is_normal.cpp' || echo '$(srcdir)/'`rational_is_normal.cpp
	mv -f $(DEPDIR)/test-rational_is_normal.Tpo $(DEPDIR)/test-rational_is_normal.Po
#	source='rational_is_normal.cpp' object='test-rational_is_normal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_is_normal.o `test -f 'rational_is_normal.cpp' || echo '$(srcdir)/'`rational_is_normal.cpp

test-rational_is_normal.obj: rational_is_normal.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_is_normal.obj -MD -MP -MF $(DEPDIR)/test-rational_is_normal.Tpo -c -o test-rational_is_normal.obj `if test -f 'rational_is_normal.cpp'; then $(CYGPATH_W) 'rational_is_normal.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_is_normal.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_is_normal.Tpo $(DEPDIR)/test-rational_is_normal.Po
#	source='rational_is_normal.cpp' object='test-rational_is_normal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_is_normal.obj `if test -f 'rational_is_normal.cpp'; then $(CYGPATH_W) 'rational_is_normal.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_is_normal.cpp'; fi`

test-rational_is_null.o: rational_is_null.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_is_null.o -MD -MP -MF $(DEPDIR)/test-rational_is_null.Tpo -c -o test-rational_is_null.o `test -f 'rational_is_null.cpp' || echo '$(srcdir)/'`rational_is_null.cpp
	mv -f $(DEPDIR)/test-rational_is_null.Tpo $(DEPDIR)/test-rational_is_null.Po
#	source='rational_is_null.cpp' object='test-rational_is_null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_is_null.o `test -f 'rational_is_null.cpp' || echo '$(srcdir)/'`rational_is_null.cpp

test-rational_is_null.obj: rational_is_null.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_is_null.obj -MD -MP -MF $(DEPDIR)/test-rational_is_null.Tpo -c -o test-rational_is_null.obj `if test -f 'rational_is_null.cpp'; then $(CYGPATH_W) 'rational_is_null.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_is_null.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_is_null.Tpo $(DEPDIR)/test-rational_is_null.Po
#	source='rational_is_null.cpp' object='test-rational_is_null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_is_null.obj `if test -f 'rational_is_null.cpp'; then $(CYGPATH_W) 'rational_is_null.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_is_null.cpp'; fi`

test-rational_is_unit.o: rational_is_unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_is_unit.o -MD -MP -MF $(DEPDIR)/test-rational_is_unit.Tpo -c -o test-rational_is_unit.o `test -f 'rational_is_unit.cpp' || echo '$(srcdir)/'`rational_is_unit.cpp
	mv -f $(DEPDIR)/test-rational_is_unit.Tpo $(DEPDIR)/test-rational_is_unit.Po
#	source='rational_is_unit.cpp' object='test-rational_is_unit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_is_unit.o `test -f 'rational_is_unit.cpp' || echo '$(srcdir)/'`rational_is_unit.cpp

test-rational_is_unit.obj: rational_is_unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_is_unit.obj -MD -MP -MF $(DEPDIR)/test-rational_is_unit.Tpo -c -o test-rational_is_unit.obj `if test -f 'rational_is_unit.cpp'; then $(CYGPATH_W) 'rational_is_unit.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_is_unit.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_is_unit.Tpo $(DEPDIR)/test-rational_is_unit.Po
#	source='rational_is_unit.cpp' object='test-rational_is_unit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_is_unit.obj `if test -f 'rational_is_unit.cpp'; then $(CYGPATH_W) 'rational_is_unit.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_is_unit.cpp'; fi`

test-rational_mul_div.o: rational_mul_div.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_mul_div.o -MD -MP -MF $(DEPDIR)/test-rational_mul_div.Tpo -c -o test-rational_mul_div.o `test -f 'rational_mul_div.cpp' || echo '$(srcdir)/'`rational_mul_div.cpp
	mv -f $(DEPDIR)/test-rational_mul_div.Tpo $(DEPDIR)/test-rational_mul_div.Po
#	source='rational_mul_div.cpp' object='test-rational_mul_div.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_mul_div.o `test -f 'rational_mul_div.cpp' || echo '$(srcdir)/'`rational_mul_div.cpp

test-rational_mul_div.obj: rational_mul_div.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_mul_div.obj -MD -MP -MF $(DEPDIR)/test-rational_mul_div.Tpo -c -o test-rational_mul_div.obj `if test -f 'rational_mul_div.cpp'; then $(CYGPATH_W) 'rational_mul_div.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_mul_div.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_mul_div.Tpo $(DEPDIR)/test-rational_mul_div.Po
#	source='rational_mul_div.cpp' object='test-rational_mul_div.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_mul_div.obj `if test -f 'rational_mul_div.cpp'; then $(CYGPATH_W) 'rational_mul_div.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_mul_div.cpp'; fi`

test-rational_numer_denom.o: rational_numer_denom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_numer_denom.o -MD -MP -MF $(DEPDIR)/test-rational_numer_denom.Tpo -c -o test-rational_numer_denom.o `test -f 'rational_numer_denom.cpp' || echo '$(srcdir)/'`rational_numer_denom.cpp
	mv -f $(DEPDIR)/test-rational_numer_denom.Tpo $(DEPDIR)/test-rational_numer_denom.Po
#	source='rational_numer_denom.cpp' object='test-rational_numer_denom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_numer_denom.o `test -f 'rational_numer_denom.cpp' || echo '$(srcdir)/'`rational_numer_denom.cpp

test-rational_numer_denom.obj: rational_numer_denom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_numer_denom.obj -MD -MP -MF $(DEPDIR)/test-rational_numer_denom.Tpo -c -o test-rational_numer_denom.obj `if test -f 'rational_numer_denom.cpp'; then $(CYGPATH_W) 'rational_numer_denom.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_numer_denom.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_numer_denom.Tpo $(DEPDIR)/test-rational_numer_denom.Po
#	source='rational_numer_denom.cpp' object='test-rational_numer_denom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_numer_denom.obj `if test -f 'rational_numer_denom.cpp'; then $(CYGPATH_W) 'rational_numer_denom.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_numer_denom.cpp'; fi`

test-rational_opposite.o: rational_opposite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_opposite.o -MD -MP -MF $(DEPDIR)/test-rational_opposite.Tpo -c -o test-rational_opposite.o `test -f 'rational_opposite.cpp' || echo '$(srcdir)/'`rational_opposite.cpp
	mv -f $(DEPDIR)/test-rational_opposite.Tpo $(DEPDIR)/test-rational_opposite.Po
#	source='rational_opposite.cpp' object='test-rational_opposite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_opposite.o `test -f 'rational_opposite.cpp' || echo '$(srcdir)/'`rational_opposite.cpp

test-rational_opposite.obj: rational_opposite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_opposite.obj -MD -MP -MF $(DEPDIR)/test-rational_opposite.Tpo -c -o test-rational_opposite.obj `if test -f 'rational_opposite.cpp'; then $(CYGPATH_W) 'rational_opposite.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_opposite.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_opposite.Tpo $(DEPDIR)/test-rational_opposite.Po
#	source='rational_opposite.cpp' object='test-rational_opposite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_opposite.obj `if test -f 'rational_opposite.cpp'; then $(CYGPATH_W) 'rational_opposite.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_opposite.cpp'; fi`

test-rational_plus_minus.o: rational_plus_minus.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_plus_minus.o -MD -MP -MF $(DEPDIR)/test-rational_plus_minus.Tpo -c -o test-rational_plus_minus.o `test -f 'rational_plus_minus.cpp' || echo '$(srcdir)/'`rational_plus_minus.cpp
	mv -f $(DEPDIR)/test-rational_plus_minus.Tpo $(DEPDIR)/test-rational_plus_minus.Po
#	source='rational_plus_minus.cpp' object='test-rational_plus_minus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_plus_minus.o `test -f 'rational_plus_minus.cpp' || echo '$(srcdir)/'`rational_plus_minus.cpp

test-rational_plus_minus.obj: rational_plus_minus.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_plus_minus.obj -MD -MP -MF $(DEPDIR)/test-rational_plus_minus.Tpo -c -o test-rational_plus_minus.obj `if test -f 'rational_plus_minus.cpp'; then $(CYGPATH_W) 'rational_plus_minus.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_plus_minus.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_plus_minus.Tpo $(DEPDIR)/test-rational_plus_minus.Po
#	source='rational_plus_minus.cpp' object='test-rational_plus_minus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_plus_minus.obj `if test -f 'rational_plus_minus.cpp'; then $(CYGPATH_W) 'rational_plus_minus.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_plus_minus.cpp'; fi`

test-rational_sign.o: rational_sign.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_sign.o -MD -MP -MF $(DEPDIR)/test-rational_sign.Tpo -c -o test-rational_sign.o `test -f 'rational_sign.cpp' || echo '$(srcdir)/'`rational_sign.cpp
	mv -f $(DEPDIR)/test-rational_sign.Tpo $(DEPDIR)/test-rational_sign.Po
#	source='rational_sign.cpp' object='test-rational_sign.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_sign.o `test -f 'rational_sign.cpp' || echo '$(srcdir)/'`rational_sign.cpp

test-rational_sign.obj: rational_sign.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_sign.obj -MD -MP -MF $(DEPDIR)/test-rational_sign.Tpo -c -o test-rational_sign.obj `if test -f 'rational_sign.cpp'; then $(CYGPATH_W) 'rational_sign.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_sign.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_sign.Tpo $(DEPDIR)/test-rational_sign.Po
#	source='rational_sign.cpp' object='test-rational_sign.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_sign.obj `if test -f 'rational_sign.cpp'; then $(CYGPATH_W) 'rational_sign.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_sign.cpp'; fi`

test-rational_swap.o: rational_swap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_swap.o -MD -MP -MF $(DEPDIR)/test-rational_swap.Tpo -c -o test-rational_swap.o `test -f 'rational_swap.cpp' || echo '$(srcdir)/'`rational_swap.cpp
	mv -f $(DEPDIR)/test-rational_swap.Tpo $(DEPDIR)/test-rational_swap.Po
#	source='rational_swap.cpp' object='test-rational_swap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_swap.o `test -f 'rational_swap.cpp' || echo '$(srcdir)/'`rational_swap.cpp

test-rational_swap.obj: rational_swap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rational_swap.obj -MD -MP -MF $(DEPDIR)/test-rational_swap.Tpo -c -o test-rational_swap.obj `if test -f 'rational_swap.cpp'; then $(CYGPATH_W) 'rational_swap.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_swap.cpp'; fi`
	mv -f $(DEPDIR)/test-rational_swap.Tpo $(DEPDIR)/test-rational_swap.Po
#	source='rational_swap.cpp' object='test-rational_swap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rational_swap.obj `if test -f 'rational_swap.cpp'; then $(CYGPATH_W) 'rational_swap.cpp'; else $(CYGPATH_W) '$(srcdir)/rational_swap.cpp'; fi`

test-residue.o: residue.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-residue.o -MD -MP -MF $(DEPDIR)/test-residue.Tpo -c -o test-residue.o `test -f 'residue.cpp' || echo '$(srcdir)/'`residue.cpp
	mv -f $(DEPDIR)/test-residue.Tpo $(DEPDIR)/test-residue.Po
#	source='residue.cpp' object='test-residue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-residue.o `test -f 'residue.cpp' || echo '$(srcdir)/'`residue.cpp

test-residue.obj: residue.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-residue.obj -MD -MP -MF $(DEPDIR)/test-residue.Tpo -c -o test-residue.obj `if test -f 'residue.cpp'; then $(CYGPATH_W) 'residue.cpp'; else $(CYGPATH_W) '$(srcdir)/residue.cpp'; fi`
	mv -f $(DEPDIR)/test-residue.Tpo $(DEPDIR)/test-residue.Po
#	source='residue.cpp' object='test-residue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-residue.obj `if test -f 'residue.cpp'; then $(CYGPATH_W) 'residue.cpp'; else $(CYGPATH_W) '$(srcdir)/residue.cpp'; fi`

test-residue_factory.o: residue_factory.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-residue_factory.o -MD -MP -MF $(DEPDIR)/test-residue_factory.Tpo -c -o test-residue_factory.o `test -f 'residue_factory.cpp' || echo '$(srcdir)/'`residue_factory.cpp
	mv -f $(DEPDIR)/test-residue_factory.Tpo $(DEPDIR)/test-residue_factory.Po
#	source='residue_factory.cpp' object='test-residue_factory.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-residue_factory.o `test -f 'residue_factory.cpp' || echo '$(srcdir)/'`residue_factory.cpp

test-residue_factory.obj: residue_factory.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-residue_factory.obj -MD -MP -MF $(DEPDIR)/test-residue_factory.Tpo -c -o test-residue_factory.obj `if test -f 'residue_factory.cpp'; then $(CYGPATH_W) 'residue_factory.cpp'; else $(CYGPATH_W) '$(srcdir)/residue_factory.cpp'; fi`
	mv -f $(DEPDIR)/test-residue_factory.Tpo $(DEPDIR)/test-residue_factory.Po
#	source='residue_factory.cpp' object='test-residue_factory.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-residue_factory.obj `if test -f 'residue_factory.cpp'; then $(CYGPATH_W) 'residue_factory.cpp'; else $(CYGPATH_W) '$(srcdir)/residue_factory.cpp'; fi`

test-rho_pollard_function.o: rho_pollard_function.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rho_pollard_function.o -MD -MP -MF $(DEPDIR)/test-rho_pollard_function.Tpo -c -o test-rho_pollard_function.o `test -f 'rho_pollard_function.cpp' || echo '$(srcdir)/'`rho_pollard_function.cpp
	mv -f $(DEPDIR)/test-rho_pollard_function.Tpo $(DEPDIR)/test-rho_pollard_function.Po
#	source='rho_pollard_function.cpp' object='test-rho_pollard_function.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rho_pollard_function.o `test -f 'rho_pollard_function.cpp' || echo '$(srcdir)/'`rho_pollard_function.cpp

test-rho_pollard_function.obj: rho_pollard_function.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-rho_pollard_function.obj -MD -MP -MF $(DEPDIR)/test-rho_pollard_function.Tpo -c -o test-rho_pollard_function.obj `if test -f 'rho_pollard_function.cpp'; then $(CYGPATH_W) 'rho_pollard_function.cpp'; else $(CYGPATH_W) '$(srcdir)/rho_pollard_function.cpp'; fi`
	mv -f $(DEPDIR)/test-rho_pollard_function.Tpo $(DEPDIR)/test-rho_pollard_function.Po
#	source='rho_pollard_function.cpp' object='test-rho_pollard_function.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-rho_pollard_function.obj `if test -f 'rho_pollard_function.cpp'; then $(CYGPATH_W) 'rho_pollard_function.cpp'; else $(CYGPATH_W) '$(srcdir)/rho_pollard_function.cpp'; fi`

test-skeleton_motzkin_burger.o: skeleton_motzkin_burger.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-skeleton_motzkin_burger.o -MD -MP -MF $(DEPDIR)/test-skeleton_motzkin_burger.Tpo -c -o test-skeleton_motzkin_burger.o `test -f 'skeleton_motzkin_burger.cpp' || echo '$(srcdir)/'`skeleton_motzkin_burger.cpp
	mv -f $(DEPDIR)/test-skeleton_motzkin_burger.Tpo $(DEPDIR)/test-skeleton_motzkin_burger.Po
#	source='skeleton_motzkin_burger.cpp' object='test-skeleton_motzkin_burger.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-skeleton_motzkin_burger.o `test -f 'skeleton_motzkin_burger.cpp' || echo '$(srcdir)/'`skeleton_motzkin_burger.cpp

test-skeleton_motzkin_burger.obj: skeleton_motzkin_burger.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-skeleton_motzkin_burger.obj -MD -MP -MF $(DEPDIR)/test-skeleton_motzkin_burger.Tpo -c -o test-skeleton_motzkin_burger.obj `if test -f 'skeleton_motzkin_burger.cpp'; then $(CYGPATH_W) 'skeleton_motzkin_burger.cpp'; else $(CYGPATH_W) '$(srcdir)/skeleton_motzkin_burger.cpp'; fi`
	mv -f $(DEPDIR)/test-skeleton_motzkin_burger.Tpo $(DEPDIR)/test-skeleton_motzkin_burger.Po
#	source='skeleton_motzkin_burger.cpp' object='test-skeleton_motzkin_burger.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-skeleton_motzkin_burger.obj `if test -f 'skeleton_motzkin_burger.cpp'; then $(CYGPATH_W) 'skeleton_motzkin_burger.cpp'; else $(CYGPATH_W) '$(srcdir)/skeleton_motzkin_burger.cpp'; fi`

test-smith_integer.o: smith_integer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-smith_integer.o -MD -MP -MF $(DEPDIR)/test-smith_integer.Tpo -c -o test-smith_integer.o `test -f 'smith_integer.cpp' || echo '$(srcdir)/'`smith_integer.cpp
	mv -f $(DEPDIR)/test-smith_integer.Tpo $(DEPDIR)/test-smith_integer.Po
#	source='smith_integer.cpp' object='test-smith_integer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-smith_integer.o `test -f 'smith_integer.cpp' || echo '$(srcdir)/'`smith_integer.cpp

test-smith_integer.obj: smith_integer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-smith_integer.obj -MD -MP -MF $(DEPDIR)/test-smith_integer.Tpo -c -o test-smith_integer.obj `if test -f 'smith_integer.cpp'; then $(CYGPATH_W) 'smith_integer.cpp'; else $(CYGPATH_W) '$(srcdir)/smith_integer.cpp'; fi`
	mv -f $(DEPDIR)/test-smith_integer.Tpo $(DEPDIR)/test-smith_integer.Po
#	source='smith_integer.cpp' object='test-smith_integer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-smith_integer.obj `if test -f 'smith_integer.cpp'; then $(CYGPATH_W) 'smith_integer.cpp'; else $(CYGPATH_W) '$(srcdir)/smith_integer.cpp'; fi`

test-sparse_polynom_cmp.o: sparse_polynom_cmp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_cmp.o -MD -MP -MF $(DEPDIR)/test-sparse_polynom_cmp.Tpo -c -o test-sparse_polynom_cmp.o `test -f 'sparse_polynom_cmp.cpp' || echo '$(srcdir)/'`sparse_polynom_cmp.cpp
	mv -f $(DEPDIR)/test-sparse_polynom_cmp.Tpo $(DEPDIR)/test-sparse_polynom_cmp.Po
#	source='sparse_polynom_cmp.cpp' object='test-sparse_polynom_cmp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_cmp.o `test -f 'sparse_polynom_cmp.cpp' || echo '$(srcdir)/'`sparse_polynom_cmp.cpp

test-sparse_polynom_cmp.obj: sparse_polynom_cmp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_cmp.obj -MD -MP -MF $(DEPDIR)/test-sparse_polynom_cmp.Tpo -c -o test-sparse_polynom_cmp.obj `if test -f 'sparse_polynom_cmp.cpp'; then $(CYGPATH_W) 'sparse_polynom_cmp.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_cmp.cpp'; fi`
	mv -f $(DEPDIR)/test-sparse_polynom_cmp.Tpo $(DEPDIR)/test-sparse_polynom_cmp.Po
#	source='sparse_polynom_cmp.cpp' object='test-sparse_polynom_cmp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_cmp.obj `if test -f 'sparse_polynom_cmp.cpp'; then $(CYGPATH_W) 'sparse_polynom_cmp.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_cmp.cpp'; fi`

test-sparse_polynom_multiply_divide_monom.o: sparse_polynom_multiply_divide_monom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_multiply_divide_monom.o -MD -MP -MF $(DEPDIR)/test-sparse_polynom_multiply_divide_monom.Tpo -c -o test-sparse_polynom_multiply_divide_monom.o `test -f 'sparse_polynom_multiply_divide_monom.cpp' || echo '$(srcdir)/'`sparse_polynom_multiply_divide_monom.cpp
	mv -f $(DEPDIR)/test-sparse_polynom_multiply_divide_monom.Tpo $(DEPDIR)/test-sparse_polynom_multiply_divide_monom.Po
#	source='sparse_polynom_multiply_divide_monom.cpp' object='test-sparse_polynom_multiply_divide_monom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_multiply_divide_monom.o `test -f 'sparse_polynom_multiply_divide_monom.cpp' || echo '$(srcdir)/'`sparse_polynom_multiply_divide_monom.cpp

test-sparse_polynom_multiply_divide_monom.obj: sparse_polynom_multiply_divide_monom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_multiply_divide_monom.obj -MD -MP -MF $(DEPDIR)/test-sparse_polynom_multiply_divide_monom.Tpo -c -o test-sparse_polynom_multiply_divide_monom.obj `if test -f 'sparse_polynom_multiply_divide_monom.cpp'; then $(CYGPATH_W) 'sparse_polynom_multiply_divide_monom.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_multiply_divide_monom.cpp'; fi`
	mv -f $(DEPDIR)/test-sparse_polynom_multiply_divide_monom.Tpo $(DEPDIR)/test-sparse_polynom_multiply_divide_monom.Po
#	source='sparse_polynom_multiply_divide_monom.cpp' object='test-sparse_polynom_multiply_divide_monom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_multiply_divide_monom.obj `if test -f 'sparse_polynom_multiply_divide_monom.cpp'; then $(CYGPATH_W) 'sparse_polynom_multiply_divide_monom.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_multiply_divide_monom.cpp'; fi`

test-sparse_polynom_multiply_divide_polynom.o: sparse_polynom_multiply_divide_polynom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_multiply_divide_polynom.o -MD -MP -MF $(DEPDIR)/test-sparse_polynom_multiply_divide_polynom.Tpo -c -o test-sparse_polynom_multiply_divide_polynom.o `test -f 'sparse_polynom_multiply_divide_polynom.cpp' || echo '$(srcdir)/'`sparse_polynom_multiply_divide_polynom.cpp
	mv -f $(DEPDIR)/test-sparse_polynom_multiply_divide_polynom.Tpo $(DEPDIR)/test-sparse_polynom_multiply_divide_polynom.Po
#	source='sparse_polynom_multiply_divide_polynom.cpp' object='test-sparse_polynom_multiply_divide_polynom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_multiply_divide_polynom.o `test -f 'sparse_polynom_multiply_divide_polynom.cpp' || echo '$(srcdir)/'`sparse_polynom_multiply_divide_polynom.cpp

test-sparse_polynom_multiply_divide_polynom.obj: sparse_polynom_multiply_divide_polynom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_multiply_divide_polynom.obj -MD -MP -MF $(DEPDIR)/test-sparse_polynom_multiply_divide_polynom.Tpo -c -o test-sparse_polynom_multiply_divide_polynom.obj `if test -f 'sparse_polynom_multiply_divide_polynom.cpp'; then $(CYGPATH_W) 'sparse_polynom_multiply_divide_polynom.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_multiply_divide_polynom.cpp'; fi`
	mv -f $(DEPDIR)/test-sparse_polynom_multiply_divide_polynom.Tpo $(DEPDIR)/test-sparse_polynom_multiply_divide_polynom.Po
#	source='sparse_polynom_multiply_divide_polynom.cpp' object='test-sparse_polynom_multiply_divide_polynom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_multiply_divide_polynom.obj `if test -f 'sparse_polynom_multiply_divide_polynom.cpp'; then $(CYGPATH_W) 'sparse_polynom_multiply_divide_polynom.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_multiply_divide_polynom.cpp'; fi`

test-sparse_polynom_multiply_divide_scalar.o: sparse_polynom_multiply_divide_scalar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_multiply_divide_scalar.o -MD -MP -MF $(DEPDIR)/test-sparse_polynom_multiply_divide_scalar.Tpo -c -o test-sparse_polynom_multiply_divide_scalar.o `test -f 'sparse_polynom_multiply_divide_scalar.cpp' || echo '$(srcdir)/'`sparse_polynom_multiply_divide_scalar.cpp
	mv -f $(DEPDIR)/test-sparse_polynom_multiply_divide_scalar.Tpo $(DEPDIR)/test-sparse_polynom_multiply_divide_scalar.Po
#	source='sparse_polynom_multiply_divide_scalar.cpp' object='test-sparse_polynom_multiply_divide_scalar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_multiply_divide_scalar.o `test -f 'sparse_polynom_multiply_divide_scalar.cpp' || echo '$(srcdir)/'`sparse_polynom_multiply_divide_scalar.cpp

test-sparse_polynom_multiply_divide_scalar.obj: sparse_polynom_multiply_divide_scalar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_multiply_divide_scalar.obj -MD -MP -MF $(DEPDIR)/test-sparse_polynom_multiply_divide_scalar.Tpo -c -o test-sparse_polynom_multiply_divide_scalar.obj `if test -f 'sparse_polynom_multiply_divide_scalar.cpp'; then $(CYGPATH_W) 'sparse_polynom_multiply_divide_scalar.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_multiply_divide_scalar.cpp'; fi`
	mv -f $(DEPDIR)/test-sparse_polynom_multiply_divide_scalar.Tpo $(DEPDIR)/test-sparse_polynom_multiply_divide_scalar.Po
#	source='sparse_polynom_multiply_divide_scalar.cpp' object='test-sparse_polynom_multiply_divide_scalar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_multiply_divide_scalar.obj `if test -f 'sparse_polynom_multiply_divide_scalar.cpp'; then $(CYGPATH_W) 'sparse_polynom_multiply_divide_scalar.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_multiply_divide_scalar.cpp'; fi`

test-sparse_polynom_plus_minus_monom.o: sparse_polynom_plus_minus_monom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_plus_minus_monom.o -MD -MP -MF $(DEPDIR)/test-sparse_polynom_plus_minus_monom.Tpo -c -o test-sparse_polynom_plus_minus_monom.o `test -f 'sparse_polynom_plus_minus_monom.cpp' || echo '$(srcdir)/'`sparse_polynom_plus_minus_monom.cpp
	mv -f $(DEPDIR)/test-sparse_polynom_plus_minus_monom.Tpo $(DEPDIR)/test-sparse_polynom_plus_minus_monom.Po
#	source='sparse_polynom_plus_minus_monom.cpp' object='test-sparse_polynom_plus_minus_monom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_plus_minus_monom.o `test -f 'sparse_polynom_plus_minus_monom.cpp' || echo '$(srcdir)/'`sparse_polynom_plus_minus_monom.cpp

test-sparse_polynom_plus_minus_monom.obj: sparse_polynom_plus_minus_monom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_plus_minus_monom.obj -MD -MP -MF $(DEPDIR)/test-sparse_polynom_plus_minus_monom.Tpo -c -o test-sparse_polynom_plus_minus_monom.obj `if test -f 'sparse_polynom_plus_minus_monom.cpp'; then $(CYGPATH_W) 'sparse_polynom_plus_minus_monom.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_plus_minus_monom.cpp'; fi`
	mv -f $(DEPDIR)/test-sparse_polynom_plus_minus_monom.Tpo $(DEPDIR)/test-sparse_polynom_plus_minus_monom.Po
#	source='sparse_polynom_plus_minus_monom.cpp' object='test-sparse_polynom_plus_minus_monom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_plus_minus_monom.obj `if test -f 'sparse_polynom_plus_minus_monom.cpp'; then $(CYGPATH_W) 'sparse_polynom_plus_minus_monom.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_plus_minus_monom.cpp'; fi`

test-sparse_polynom_plus_minus_polynom.o: sparse_polynom_plus_minus_polynom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_plus_minus_polynom.o -MD -MP -MF $(DEPDIR)/test-sparse_polynom_plus_minus_polynom.Tpo -c -o test-sparse_polynom_plus_minus_polynom.o `test -f 'sparse_polynom_plus_minus_polynom.cpp' || echo '$(srcdir)/'`sparse_polynom_plus_minus_polynom.cpp
	mv -f $(DEPDIR)/test-sparse_polynom_plus_minus_polynom.Tpo $(DEPDIR)/test-sparse_polynom_plus_minus_polynom.Po
#	source='sparse_polynom_plus_minus_polynom.cpp' object='test-sparse_polynom_plus_minus_polynom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_plus_minus_polynom.o `test -f 'sparse_polynom_plus_minus_polynom.cpp' || echo '$(srcdir)/'`sparse_polynom_plus_minus_polynom.cpp

test-sparse_polynom_plus_minus_polynom.obj: sparse_polynom_plus_minus_polynom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_plus_minus_polynom.obj -MD -MP -MF $(DEPDIR)/test-sparse_polynom_plus_minus_polynom.Tpo -c -o test-sparse_polynom_plus_minus_polynom.obj `if test -f 'sparse_polynom_plus_minus_polynom.cpp'; then $(CYGPATH_W) 'sparse_polynom_plus_minus_polynom.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_plus_minus_polynom.cpp'; fi`
	mv -f $(DEPDIR)/test-sparse_polynom_plus_minus_polynom.Tpo $(DEPDIR)/test-sparse_polynom_plus_minus_polynom.Po
#	source='sparse_polynom_plus_minus_polynom.cpp' object='test-sparse_polynom_plus_minus_polynom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_plus_minus_polynom.obj `if test -f 'sparse_polynom_plus_minus_polynom.cpp'; then $(CYGPATH_W) 'sparse_polynom_plus_minus_polynom.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_plus_minus_polynom.cpp'; fi`

test-sparse_polynom_plus_minus_scalar.o: sparse_polynom_plus_minus_scalar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_plus_minus_scalar.o -MD -MP -MF $(DEPDIR)/test-sparse_polynom_plus_minus_scalar.Tpo -c -o test-sparse_polynom_plus_minus_scalar.o `test -f 'sparse_polynom_plus_minus_scalar.cpp' || echo '$(srcdir)/'`sparse_polynom_plus_minus_scalar.cpp
	mv -f $(DEPDIR)/test-sparse_polynom_plus_minus_scalar.Tpo $(DEPDIR)/test-sparse_polynom_plus_minus_scalar.Po
#	source='sparse_polynom_plus_minus_scalar.cpp' object='test-sparse_polynom_plus_minus_scalar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_plus_minus_scalar.o `test -f 'sparse_polynom_plus_minus_scalar.cpp' || echo '$(srcdir)/'`sparse_polynom_plus_minus_scalar.cpp

test-sparse_polynom_plus_minus_scalar.obj: sparse_polynom_plus_minus_scalar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-sparse_polynom_plus_minus_scalar.obj -MD -MP -MF $(DEPDIR)/test-sparse_polynom_plus_minus_scalar.Tpo -c -o test-sparse_polynom_plus_minus_scalar.obj `if test -f 'sparse_polynom_plus_minus_scalar.cpp'; then $(CYGPATH_W) 'sparse_polynom_plus_minus_scalar.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_plus_minus_scalar.cpp'; fi`
	mv -f $(DEPDIR)/test-sparse_polynom_plus_minus_scalar.Tpo $(DEPDIR)/test-sparse_polynom_plus_minus_scalar.Po
#	source='sparse_polynom_plus_minus_scalar.cpp' object='test-sparse_polynom_plus_minus_scalar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-sparse_polynom_plus_minus_scalar.obj `if test -f 'sparse_polynom_plus_minus_scalar.cpp'; then $(CYGPATH_W) 'sparse_polynom_plus_minus_scalar.cpp'; else $(CYGPATH_W) '$(srcdir)/sparse_polynom_plus_minus_scalar.cpp'; fi`

test-stdafx.o: stdafx.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-stdafx.o -MD -MP -MF $(DEPDIR)/test-stdafx.Tpo -c -o test-stdafx.o `test -f 'stdafx.cpp' || echo '$(srcdir)/'`stdafx.cpp
	mv -f $(DEPDIR)/test-stdafx.Tpo $(DEPDIR)/test-stdafx.Po
#	source='stdafx.cpp' object='test-stdafx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-stdafx.o `test -f 'stdafx.cpp' || echo '$(srcdir)/'`stdafx.cpp

test-stdafx.obj: stdafx.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-stdafx.obj -MD -MP -MF $(DEPDIR)/test-stdafx.Tpo -c -o test-stdafx.obj `if test -f 'stdafx.cpp'; then $(CYGPATH_W) 'stdafx.cpp'; else $(CYGPATH_W) '$(srcdir)/stdafx.cpp'; fi`
	mv -f $(DEPDIR)/test-stdafx.Tpo $(DEPDIR)/test-stdafx.Po
#	source='stdafx.cpp' object='test-stdafx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-stdafx.obj `if test -f 'stdafx.cpp'; then $(CYGPATH_W) 'stdafx.cpp'; else $(CYGPATH_W) '$(srcdir)/stdafx.cpp'; fi`

test-test1part1.o: test1part1.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test1part1.o -MD -MP -MF $(DEPDIR)/test-test1part1.Tpo -c -o test-test1part1.o `test -f 'test1part1.cpp' || echo '$(srcdir)/'`test1part1.cpp
	mv -f $(DEPDIR)/test-test1part1.Tpo $(DEPDIR)/test-test1part1.Po
#	source='test1part1.cpp' object='test-test1part1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test1part1.o `test -f 'test1part1.cpp' || echo '$(srcdir)/'`test1part1.cpp

test-test1part1.obj: test1part1.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test1part1.obj -MD -MP -MF $(DEPDIR)/test-test1part1.Tpo -c -o test-test1part1.obj `if test -f 'test1part1.cpp'; then $(CYGPATH_W) 'test1part1.cpp'; else $(CYGPATH_W) '$(srcdir)/test1part1.cpp'; fi`
	mv -f $(DEPDIR)/test-test1part1.Tpo $(DEPDIR)/test-test1part1.Po
#	source='test1part1.cpp' object='test-test1part1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test1part1.obj `if test -f 'test1part1.cpp'; then $(CYGPATH_W) 'test1part1.cpp'; else $(CYGPATH_W) '$(srcdir)/test1part1.cpp'; fi`

test-test1part2.o: test1part2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test1part2.o -MD -MP -MF $(DEPDIR)/test-test1part2.Tpo -c -o test-test1part2.o `test -f 'test1part2.cpp' || echo '$(srcdir)/'`test1part2.cpp
	mv -f $(DEPDIR)/test-test1part2.Tpo $(DEPDIR)/test-test1part2.Po
#	source='test1part2.cpp' object='test-test1part2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test1part2.o `test -f 'test1part2.cpp' || echo '$(srcdir)/'`test1part2.cpp

test-test1part2.obj: test1part2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test1part2.obj -MD -MP -MF $(DEPDIR)/test-test1part2.Tpo -c -o test-test1part2.obj `if test -f 'test1part2.cpp'; then $(CYGPATH_W) 'test1part2.cpp'; else $(CYGPATH_W) '$(srcdir)/test1part2.cpp'; fi`
	mv -f $(DEPDIR)/test-test1part2.Tpo $(DEPDIR)/test-test1part2.Po
#	source='test1part2.cpp' object='test-test1part2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test1part2.obj `if test -f 'test1part2.cpp'; then $(CYGPATH_W) 'test1part2.cpp'; else $(CYGPATH_W) '$(srcdir)/test1part2.cpp'; fi`

test-test1part3.o: test1part3.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test1part3.o -MD -MP -MF $(DEPDIR)/test-test1part3.Tpo -c -o test-test1part3.o `test -f 'test1part3.cpp' || echo '$(srcdir)/'`test1part3.cpp
	mv -f $(DEPDIR)/test-test1part3.Tpo $(DEPDIR)/test-test1part3.Po
#	source='test1part3.cpp' object='test-test1part3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test1part3.o `test -f 'test1part3.cpp' || echo '$(srcdir)/'`test1part3.cpp

test-test1part3.obj: test1part3.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test1part3.obj -MD -MP -MF $(DEPDIR)/test-test1part3.Tpo -c -o test-test1part3.obj `if test -f 'test1part3.cpp'; then $(CYGPATH_W) 'test1part3.cpp'; else $(CYGPATH_W) '$(srcdir)/test1part3.cpp'; fi`
	mv -f $(DEPDIR)/test-test1part3.Tpo $(DEPDIR)/test-test1part3.Po
#	source='test1part3.cpp' object='test-test1part3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test1part3.obj `if test -f 'test1part3.cpp'; then $(CYGPATH_W) 'test1part3.cpp'; else $(CYGPATH_W) '$(srcdir)/test1part3.cpp'; fi`

test-test1part4.o: test1part4.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test1part4.o -MD -MP -MF $(DEPDIR)/test-test1part4.Tpo -c -o test-test1part4.o `test -f 'test1part4.cpp' || echo '$(srcdir)/'`test1part4.cpp
	mv -f $(DEPDIR)/test-test1part4.Tpo $(DEPDIR)/test-test1part4.Po
#	source='test1part4.cpp' object='test-test1part4.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test1part4.o `test -f 'test1part4.cpp' || echo '$(srcdir)/'`test1part4.cpp

test-test1part4.obj: test1part4.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test1part4.obj -MD -MP -MF $(DEPDIR)/test-test1part4.Tpo -c -o test-test1part4.obj `if test -f 'test1part4.cpp'; then $(CYGPATH_W) 'test1part4.cpp'; else $(CYGPATH_W) '$(srcdir)/test1part4.cpp'; fi`
	mv -f $(DEPDIR)/test-test1part4.Tpo $(DEPDIR)/test-test1part4.Po
#	source='test1part4.cpp' object='test-test1part4.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test1part4.obj `if test -f 'test1part4.cpp'; then $(CYGPATH_W) 'test1part4.cpp'; else $(CYGPATH_W) '$(srcdir)/test1part4.cpp'; fi`

test-test2.o: test2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test2.o -MD -MP -MF $(DEPDIR)/test-test2.Tpo -c -o test-test2.o `test -f 'test2.cpp' || echo '$(srcdir)/'`test2.cpp
	mv -f $(DEPDIR)/test-test2.Tpo $(DEPDIR)/test-test2.Po
#	source='test2.cpp' object='test-test2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test2.o `test -f 'test2.cpp' || echo '$(srcdir)/'`test2.cpp

test-test2.obj: test2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test2.obj -MD -MP -MF $(DEPDIR)/test-test2.Tpo -c -o test-test2.obj `if test -f 'test2.cpp'; then $(CYGPATH_W) 'test2.cpp'; else $(CYGPATH_W) '$(srcdir)/test2.cpp'; fi`
	mv -f $(DEPDIR)/test-test2.Tpo $(DEPDIR)/test-test2.Po
#	source='test2.cpp' object='test-test2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test2.obj `if test -f 'test2.cpp'; then $(CYGPATH_W) 'test2.cpp'; else $(CYGPATH_W) '$(srcdir)/test2.cpp'; fi`

test-test3.o: test3.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test3.o -MD -MP -MF $(DEPDIR)/test-test3.Tpo -c -o test-test3.o `test -f 'test3.cpp' || echo '$(srcdir)/'`test3.cpp
	mv -f $(DEPDIR)/test-test3.Tpo $(DEPDIR)/test-test3.Po
#	source='test3.cpp' object='test-test3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test3.o `test -f 'test3.cpp' || echo '$(srcdir)/'`test3.cpp

test-test3.obj: test3.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test3.obj -MD -MP -MF $(DEPDIR)/test-test3.Tpo -c -o test-test3.obj `if test -f 'test3.cpp'; then $(CYGPATH_W) 'test3.cpp'; else $(CYGPATH_W) '$(srcdir)/test3.cpp'; fi`
	mv -f $(DEPDIR)/test-test3.Tpo $(DEPDIR)/test-test3.Po
#	source='test3.cpp' object='test-test3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test3.obj `if test -f 'test3.cpp'; then $(CYGPATH_W) 'test3.cpp'; else $(CYGPATH_W) '$(srcdir)/test3.cpp'; fi`

test-test4part1.o: test4part1.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part1.o -MD -MP -MF $(DEPDIR)/test-test4part1.Tpo -c -o test-test4part1.o `test -f 'test4part1.cpp' || echo '$(srcdir)/'`test4part1.cpp
	mv -f $(DEPDIR)/test-test4part1.Tpo $(DEPDIR)/test-test4part1.Po
#	source='test4part1.cpp' object='test-test4part1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part1.o `test -f 'test4part1.cpp' || echo '$(srcdir)/'`test4part1.cpp

test-test4part1.obj: test4part1.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part1.obj -MD -MP -MF $(DEPDIR)/test-test4part1.Tpo -c -o test-test4part1.obj `if test -f 'test4part1.cpp'; then $(CYGPATH_W) 'test4part1.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part1.cpp'; fi`
	mv -f $(DEPDIR)/test-test4part1.Tpo $(DEPDIR)/test-test4part1.Po
#	source='test4part1.cpp' object='test-test4part1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part1.obj `if test -f 'test4part1.cpp'; then $(CYGPATH_W) 'test4part1.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part1.cpp'; fi`

test-test4part2.o: test4part2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part2.o -MD -MP -MF $(DEPDIR)/test-test4part2.Tpo -c -o test-test4part2.o `test -f 'test4part2.cpp' || echo '$(srcdir)/'`test4part2.cpp
	mv -f $(DEPDIR)/test-test4part2.Tpo $(DEPDIR)/test-test4part2.Po
#	source='test4part2.cpp' object='test-test4part2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part2.o `test -f 'test4part2.cpp' || echo '$(srcdir)/'`test4part2.cpp

test-test4part2.obj: test4part2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part2.obj -MD -MP -MF $(DEPDIR)/test-test4part2.Tpo -c -o test-test4part2.obj `if test -f 'test4part2.cpp'; then $(CYGPATH_W) 'test4part2.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part2.cpp'; fi`
	mv -f $(DEPDIR)/test-test4part2.Tpo $(DEPDIR)/test-test4part2.Po
#	source='test4part2.cpp' object='test-test4part2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part2.obj `if test -f 'test4part2.cpp'; then $(CYGPATH_W) 'test4part2.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part2.cpp'; fi`

test-test4part3.o: test4part3.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part3.o -MD -MP -MF $(DEPDIR)/test-test4part3.Tpo -c -o test-test4part3.o `test -f 'test4part3.cpp' || echo '$(srcdir)/'`test4part3.cpp
	mv -f $(DEPDIR)/test-test4part3.Tpo $(DEPDIR)/test-test4part3.Po
#	source='test4part3.cpp' object='test-test4part3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part3.o `test -f 'test4part3.cpp' || echo '$(srcdir)/'`test4part3.cpp

test-test4part3.obj: test4part3.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part3.obj -MD -MP -MF $(DEPDIR)/test-test4part3.Tpo -c -o test-test4part3.obj `if test -f 'test4part3.cpp'; then $(CYGPATH_W) 'test4part3.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part3.cpp'; fi`
	mv -f $(DEPDIR)/test-test4part3.Tpo $(DEPDIR)/test-test4part3.Po
#	source='test4part3.cpp' object='test-test4part3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part3.obj `if test -f 'test4part3.cpp'; then $(CYGPATH_W) 'test4part3.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part3.cpp'; fi`

test-test4part4.o: test4part4.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part4.o -MD -MP -MF $(DEPDIR)/test-test4part4.Tpo -c -o test-test4part4.o `test -f 'test4part4.cpp' || echo '$(srcdir)/'`test4part4.cpp
	mv -f $(DEPDIR)/test-test4part4.Tpo $(DEPDIR)/test-test4part4.Po
#	source='test4part4.cpp' object='test-test4part4.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part4.o `test -f 'test4part4.cpp' || echo '$(srcdir)/'`test4part4.cpp

test-test4part4.obj: test4part4.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part4.obj -MD -MP -MF $(DEPDIR)/test-test4part4.Tpo -c -o test-test4part4.obj `if test -f 'test4part4.cpp'; then $(CYGPATH_W) 'test4part4.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part4.cpp'; fi`
	mv -f $(DEPDIR)/test-test4part4.Tpo $(DEPDIR)/test-test4part4.Po
#	source='test4part4.cpp' object='test-test4part4.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part4.obj `if test -f 'test4part4.cpp'; then $(CYGPATH_W) 'test4part4.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part4.cpp'; fi`

test-test4part5.o: test4part5.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part5.o -MD -MP -MF $(DEPDIR)/test-test4part5.Tpo -c -o test-test4part5.o `test -f 'test4part5.cpp' || echo '$(srcdir)/'`test4part5.cpp
	mv -f $(DEPDIR)/test-test4part5.Tpo $(DEPDIR)/test-test4part5.Po
#	source='test4part5.cpp' object='test-test4part5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part5.o `test -f 'test4part5.cpp' || echo '$(srcdir)/'`test4part5.cpp

test-test4part5.obj: test4part5.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part5.obj -MD -MP -MF $(DEPDIR)/test-test4part5.Tpo -c -o test-test4part5.obj `if test -f 'test4part5.cpp'; then $(CYGPATH_W) 'test4part5.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part5.cpp'; fi`
	mv -f $(DEPDIR)/test-test4part5.Tpo $(DEPDIR)/test-test4part5.Po
#	source='test4part5.cpp' object='test-test4part5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part5.obj `if test -f 'test4part5.cpp'; then $(CYGPATH_W) 'test4part5.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part5.cpp'; fi`

test-test4part6.o: test4part6.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part6.o -MD -MP -MF $(DEPDIR)/test-test4part6.Tpo -c -o test-test4part6.o `test -f 'test4part6.cpp' || echo '$(srcdir)/'`test4part6.cpp
	mv -f $(DEPDIR)/test-test4part6.Tpo $(DEPDIR)/test-test4part6.Po
#	source='test4part6.cpp' object='test-test4part6.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part6.o `test -f 'test4part6.cpp' || echo '$(srcdir)/'`test4part6.cpp

test-test4part6.obj: test4part6.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part6.obj -MD -MP -MF $(DEPDIR)/test-test4part6.Tpo -c -o test-test4part6.obj `if test -f 'test4part6.cpp'; then $(CYGPATH_W) 'test4part6.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part6.cpp'; fi`
	mv -f $(DEPDIR)/test-test4part6.Tpo $(DEPDIR)/test-test4part6.Po
#	source='test4part6.cpp' object='test-test4part6.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part6.obj `if test -f 'test4part6.cpp'; then $(CYGPATH_W) 'test4part6.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part6.cpp'; fi`

test-test4part7.o: test4part7.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part7.o -MD -MP -MF $(DEPDIR)/test-test4part7.Tpo -c -o test-test4part7.o `test -f 'test4part7.cpp' || echo '$(srcdir)/'`test4part7.cpp
	mv -f $(DEPDIR)/test-test4part7.Tpo $(DEPDIR)/test-test4part7.Po
#	source='test4part7.cpp' object='test-test4part7.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part7.o `test -f 'test4part7.cpp' || echo '$(srcdir)/'`test4part7.cpp

test-test4part7.obj: test4part7.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part7.obj -MD -MP -MF $(DEPDIR)/test-test4part7.Tpo -c -o test-test4part7.obj `if test -f 'test4part7.cpp'; then $(CYGPATH_W) 'test4part7.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part7.cpp'; fi`
	mv -f $(DEPDIR)/test-test4part7.Tpo $(DEPDIR)/test-test4part7.Po
#	source='test4part7.cpp' object='test-test4part7.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part7.obj `if test -f 'test4part7.cpp'; then $(CYGPATH_W) 'test4part7.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part7.cpp'; fi`

test-test4part8.o: test4part8.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part8.o -MD -MP -MF $(DEPDIR)/test-test4part8.Tpo -c -o test-test4part8.o `test -f 'test4part8.cpp' || echo '$(srcdir)/'`test4part8.cpp
	mv -f $(DEPDIR)/test-test4part8.Tpo $(DEPDIR)/test-test4part8.Po
#	source='test4part8.cpp' object='test-test4part8.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part8.o `test -f 'test4part8.cpp' || echo '$(srcdir)/'`test4part8.cpp

test-test4part8.obj: test4part8.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test4part8.obj -MD -MP -MF $(DEPDIR)/test-test4part8.Tpo -c -o test-test4part8.obj `if test -f 'test4part8.cpp'; then $(CYGPATH_W) 'test4part8.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part8.cpp'; fi`
	mv -f $(DEPDIR)/test-test4part8.Tpo $(DEPDIR)/test-test4part8.Po
#	source='test4part8.cpp' object='test-test4part8.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test4part8.obj `if test -f 'test4part8.cpp'; then $(CYGPATH_W) 'test4part8.cpp'; else $(CYGPATH_W) '$(srcdir)/test4part8.cpp'; fi`

test-test5.o: test5.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test5.o -MD -MP -MF $(DEPDIR)/test-test5.Tpo -c -o test-test5.o `test -f 'test5.cpp' || echo '$(srcdir)/'`test5.cpp
	mv -f $(DEPDIR)/test-test5.Tpo $(DEPDIR)/test-test5.Po
#	source='test5.cpp' object='test-test5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test5.o `test -f 'test5.cpp' || echo '$(srcdir)/'`test5.cpp

test-test5.obj: test5.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-test5.obj -MD -MP -MF $(DEPDIR)/test-test5.Tpo -c -o test-test5.obj `if test -f 'test5.cpp'; then $(CYGPATH_W) 'test5.cpp'; else $(CYGPATH_W) '$(srcdir)/test5.cpp'; fi`
	mv -f $(DEPDIR)/test-test5.Tpo $(DEPDIR)/test-test5.Po
#	source='test5.cpp' object='test-test5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-test5.obj `if test -f 'test5.cpp'; then $(CYGPATH_W) 'test5.cpp'; else $(CYGPATH_W) '$(srcdir)/test5.cpp'; fi`

test-timer_resolution.o: timer_resolution.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-timer_resolution.o -MD -MP -MF $(DEPDIR)/test-timer_resolution.Tpo -c -o test-timer_resolution.o `test -f 'timer_resolution.cpp' || echo '$(srcdir)/'`timer_resolution.cpp
	mv -f $(DEPDIR)/test-timer_resolution.Tpo $(DEPDIR)/test-timer_resolution.Po
#	source='timer_resolution.cpp' object='test-timer_resolution.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-timer_resolution.o `test -f 'timer_resolution.cpp' || echo '$(srcdir)/'`timer_resolution.cpp

test-timer_resolution.obj: timer_resolution.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-timer_resolution.obj -MD -MP -MF $(DEPDIR)/test-timer_resolution.Tpo -c -o test-timer_resolution.obj `if test -f 'timer_resolution.cpp'; then $(CYGPATH_W) 'timer_resolution.cpp'; else $(CYGPATH_W) '$(srcdir)/timer_resolution.cpp'; fi`
	mv -f $(DEPDIR)/test-timer_resolution.Tpo $(DEPDIR)/test-timer_resolution.Po
#	source='timer_resolution.cpp' object='test-timer_resolution.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-timer_resolution.obj `if test -f 'timer_resolution.cpp'; then $(CYGPATH_W) 'timer_resolution.cpp'; else $(CYGPATH_W) '$(srcdir)/timer_resolution.cpp'; fi`

test-triangulate.o: triangulate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-triangulate.o -MD -MP -MF $(DEPDIR)/test-triangulate.Tpo -c -o test-triangulate.o `test -f 'triangulate.cpp' || echo '$(srcdir)/'`triangulate.cpp
	mv -f $(DEPDIR)/test-triangulate.Tpo $(DEPDIR)/test-triangulate.Po
#	source='triangulate.cpp' object='test-triangulate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-triangulate.o `test -f 'triangulate.cpp' || echo '$(srcdir)/'`triangulate.cpp

test-triangulate.obj: triangulate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-triangulate.obj -MD -MP -MF $(DEPDIR)/test-triangulate.Tpo -c -o test-triangulate.obj `if test -f 'triangulate.cpp'; then $(CYGPATH_W) 'triangulate.cpp'; else $(CYGPATH_W) '$(srcdir)/triangulate.cpp'; fi`
	mv -f $(DEPDIR)/test-triangulate.Tpo $(DEPDIR)/test-triangulate.Po
#	source='triangulate.cpp' object='test-triangulate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-triangulate.obj `if test -f 'triangulate.cpp'; then $(CYGPATH_W) 'triangulate.cpp'; else $(CYGPATH_W) '$(srcdir)/triangulate.cpp'; fi`

test-type_pair_traits_for_bn.o: type_pair_traits_for_bn.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-type_pair_traits_for_bn.o -MD -MP -MF $(DEPDIR)/test-type_pair_traits_for_bn.Tpo -c -o test-type_pair_traits_for_bn.o `test -f 'type_pair_traits_for_bn.cpp' || echo '$(srcdir)/'`type_pair_traits_for_bn.cpp
	mv -f $(DEPDIR)/test-type_pair_traits_for_bn.Tpo $(DEPDIR)/test-type_pair_traits_for_bn.Po
#	source='type_pair_traits_for_bn.cpp' object='test-type_pair_traits_for_bn.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-type_pair_traits_for_bn.o `test -f 'type_pair_traits_for_bn.cpp' || echo '$(srcdir)/'`type_pair_traits_for_bn.cpp

test-type_pair_traits_for_bn.obj: type_pair_traits_for_bn.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-type_pair_traits_for_bn.obj -MD -MP -MF $(DEPDIR)/test-type_pair_traits_for_bn.Tpo -c -o test-type_pair_traits_for_bn.obj `if test -f 'type_pair_traits_for_bn.cpp'; then $(CYGPATH_W) 'type_pair_traits_for_bn.cpp'; else $(CYGPATH_W) '$(srcdir)/type_pair_traits_for_bn.cpp'; fi`
	mv -f $(DEPDIR)/test-type_pair_traits_for_bn.Tpo $(DEPDIR)/test-type_pair_traits_for_bn.Po
#	source='type_pair_traits_for_bn.cpp' object='test-type_pair_traits_for_bn.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-type_pair_traits_for_bn.obj `if test -f 'type_pair_traits_for_bn.cpp'; then $(CYGPATH_W) 'type_pair_traits_for_bn.cpp'; else $(CYGPATH_W) '$(srcdir)/type_pair_traits_for_bn.cpp'; fi`

test-type_pair_traits_is_convertible.o: type_pair_traits_is_convertible.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-type_pair_traits_is_convertible.o -MD -MP -MF $(DEPDIR)/test-type_pair_traits_is_convertible.Tpo -c -o test-type_pair_traits_is_convertible.o `test -f 'type_pair_traits_is_convertible.cpp' || echo '$(srcdir)/'`type_pair_traits_is_convertible.cpp
	mv -f $(DEPDIR)/test-type_pair_traits_is_convertible.Tpo $(DEPDIR)/test-type_pair_traits_is_convertible.Po
#	source='type_pair_traits_is_convertible.cpp' object='test-type_pair_traits_is_convertible.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-type_pair_traits_is_convertible.o `test -f 'type_pair_traits_is_convertible.cpp' || echo '$(srcdir)/'`type_pair_traits_is_convertible.cpp

test-type_pair_traits_is_convertible.obj: type_pair_traits_is_convertible.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-type_pair_traits_is_convertible.obj -MD -MP -MF $(DEPDIR)/test-type_pair_traits_is_convertible.Tpo -c -o test-type_pair_traits_is_convertible.obj `if test -f 'type_pair_traits_is_convertible.cpp'; then $(CYGPATH_W) 'type_pair_traits_is_convertible.cpp'; else $(CYGPATH_W) '$(srcdir)/type_pair_traits_is_convertible.cpp'; fi`
	mv -f $(DEPDIR)/test-type_pair_traits_is_convertible.Tpo $(DEPDIR)/test-type_pair_traits_is_convertible.Po
#	source='type_pair_traits_is_convertible.cpp' object='test-type_pair_traits_is_convertible.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-type_pair_traits_is_convertible.obj `if test -f 'type_pair_traits_is_convertible.cpp'; then $(CYGPATH_W) 'type_pair_traits_is_convertible.cpp'; else $(CYGPATH_W) '$(srcdir)/type_pair_traits_is_convertible.cpp'; fi`

test-vector_access.o: vector_access.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_access.o -MD -MP -MF $(DEPDIR)/test-vector_access.Tpo -c -o test-vector_access.o `test -f 'vector_access.cpp' || echo '$(srcdir)/'`vector_access.cpp
	mv -f $(DEPDIR)/test-vector_access.Tpo $(DEPDIR)/test-vector_access.Po
#	source='vector_access.cpp' object='test-vector_access.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_access.o `test -f 'vector_access.cpp' || echo '$(srcdir)/'`vector_access.cpp

test-vector_access.obj: vector_access.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_access.obj -MD -MP -MF $(DEPDIR)/test-vector_access.Tpo -c -o test-vector_access.obj `if test -f 'vector_access.cpp'; then $(CYGPATH_W) 'vector_access.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_access.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_access.Tpo $(DEPDIR)/test-vector_access.Po
#	source='vector_access.cpp' object='test-vector_access.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_access.obj `if test -f 'vector_access.cpp'; then $(CYGPATH_W) 'vector_access.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_access.cpp'; fi`

test-vector_compares.o: vector_compares.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_compares.o -MD -MP -MF $(DEPDIR)/test-vector_compares.Tpo -c -o test-vector_compares.o `test -f 'vector_compares.cpp' || echo '$(srcdir)/'`vector_compares.cpp
	mv -f $(DEPDIR)/test-vector_compares.Tpo $(DEPDIR)/test-vector_compares.Po
#	source='vector_compares.cpp' object='test-vector_compares.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_compares.o `test -f 'vector_compares.cpp' || echo '$(srcdir)/'`vector_compares.cpp

test-vector_compares.obj: vector_compares.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_compares.obj -MD -MP -MF $(DEPDIR)/test-vector_compares.Tpo -c -o test-vector_compares.obj `if test -f 'vector_compares.cpp'; then $(CYGPATH_W) 'vector_compares.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_compares.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_compares.Tpo $(DEPDIR)/test-vector_compares.Po
#	source='vector_compares.cpp' object='test-vector_compares.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_compares.obj `if test -f 'vector_compares.cpp'; then $(CYGPATH_W) 'vector_compares.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_compares.cpp'; fi`

test-vector_constructor.o: vector_constructor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_constructor.o -MD -MP -MF $(DEPDIR)/test-vector_constructor.Tpo -c -o test-vector_constructor.o `test -f 'vector_constructor.cpp' || echo '$(srcdir)/'`vector_constructor.cpp
	mv -f $(DEPDIR)/test-vector_constructor.Tpo $(DEPDIR)/test-vector_constructor.Po
#	source='vector_constructor.cpp' object='test-vector_constructor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_constructor.o `test -f 'vector_constructor.cpp' || echo '$(srcdir)/'`vector_constructor.cpp

test-vector_constructor.obj: vector_constructor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_constructor.obj -MD -MP -MF $(DEPDIR)/test-vector_constructor.Tpo -c -o test-vector_constructor.obj `if test -f 'vector_constructor.cpp'; then $(CYGPATH_W) 'vector_constructor.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_constructor.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_constructor.Tpo $(DEPDIR)/test-vector_constructor.Po
#	source='vector_constructor.cpp' object='test-vector_constructor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_constructor.obj `if test -f 'vector_constructor.cpp'; then $(CYGPATH_W) 'vector_constructor.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_constructor.cpp'; fi`

test-vector.o: vector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector.o -MD -MP -MF $(DEPDIR)/test-vector.Tpo -c -o test-vector.o `test -f 'vector.cpp' || echo '$(srcdir)/'`vector.cpp
	mv -f $(DEPDIR)/test-vector.Tpo $(DEPDIR)/test-vector.Po
#	source='vector.cpp' object='test-vector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector.o `test -f 'vector.cpp' || echo '$(srcdir)/'`vector.cpp

test-vector.obj: vector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector.obj -MD -MP -MF $(DEPDIR)/test-vector.Tpo -c -o test-vector.obj `if test -f 'vector.cpp'; then $(CYGPATH_W) 'vector.cpp'; else $(CYGPATH_W) '$(srcdir)/vector.cpp'; fi`
	mv -f $(DEPDIR)/test-vector.Tpo $(DEPDIR)/test-vector.Po
#	source='vector.cpp' object='test-vector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector.obj `if test -f 'vector.cpp'; then $(CYGPATH_W) 'vector.cpp'; else $(CYGPATH_W) '$(srcdir)/vector.cpp'; fi`

test-vector_inverse.o: vector_inverse.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_inverse.o -MD -MP -MF $(DEPDIR)/test-vector_inverse.Tpo -c -o test-vector_inverse.o `test -f 'vector_inverse.cpp' || echo '$(srcdir)/'`vector_inverse.cpp
	mv -f $(DEPDIR)/test-vector_inverse.Tpo $(DEPDIR)/test-vector_inverse.Po
#	source='vector_inverse.cpp' object='test-vector_inverse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_inverse.o `test -f 'vector_inverse.cpp' || echo '$(srcdir)/'`vector_inverse.cpp

test-vector_inverse.obj: vector_inverse.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_inverse.obj -MD -MP -MF $(DEPDIR)/test-vector_inverse.Tpo -c -o test-vector_inverse.obj `if test -f 'vector_inverse.cpp'; then $(CYGPATH_W) 'vector_inverse.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_inverse.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_inverse.Tpo $(DEPDIR)/test-vector_inverse.Po
#	source='vector_inverse.cpp' object='test-vector_inverse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_inverse.obj `if test -f 'vector_inverse.cpp'; then $(CYGPATH_W) 'vector_inverse.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_inverse.cpp'; fi`

test-vector_io_binary.o: vector_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_io_binary.o -MD -MP -MF $(DEPDIR)/test-vector_io_binary.Tpo -c -o test-vector_io_binary.o `test -f 'vector_io_binary.cpp' || echo '$(srcdir)/'`vector_io_binary.cpp
	mv -f $(DEPDIR)/test-vector_io_binary.Tpo $(DEPDIR)/test-vector_io_binary.Po
#	source='vector_io_binary.cpp' object='test-vector_io_binary.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_io_binary.o `test -f 'vector_io_binary.cpp' || echo '$(srcdir)/'`vector_io_binary.cpp

test-vector_io_binary.obj: vector_io_binary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_io_binary.obj -MD -MP -MF $(DEPDIR)/test-vector_io_binary.Tpo -c -o test-vector_io_binary.obj `if test -f 'vector_io_binary.cpp'; then $(CYGPATH_W) 'vector_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_io_binary.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_io_binary.Tpo $(DEPDIR)/test-vector_io_binary.Po
#	source='vector_io_binary.cpp' object='test-vector_io_binary.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_io_binary.obj `if test -f 'vector_io_binary.cpp'; then $(CYGPATH_W) 'vector_io_binary.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_io_binary.cpp'; fi`

test-vector_is_null.o: vector_is_null.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_is_null.o -MD -MP -MF $(DEPDIR)/test-vector_is_null.Tpo -c -o test-vector_is_null.o `test -f 'vector_is_null.cpp' || echo '$(srcdir)/'`vector_is_null.cpp
	mv -f $(DEPDIR)/test-vector_is_null.Tpo $(DEPDIR)/test-vector_is_null.Po
#	source='vector_is_null.cpp' object='test-vector_is_null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_is_null.o `test -f 'vector_is_null.cpp' || echo '$(srcdir)/'`vector_is_null.cpp

test-vector_is_null.obj: vector_is_null.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_is_null.obj -MD -MP -MF $(DEPDIR)/test-vector_is_null.Tpo -c -o test-vector_is_null.obj `if test -f 'vector_is_null.cpp'; then $(CYGPATH_W) 'vector_is_null.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_is_null.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_is_null.Tpo $(DEPDIR)/test-vector_is_null.Po
#	source='vector_is_null.cpp' object='test-vector_is_null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_is_null.obj `if test -f 'vector_is_null.cpp'; then $(CYGPATH_W) 'vector_is_null.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_is_null.cpp'; fi`

test-vector_is_unit.o: vector_is_unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_is_unit.o -MD -MP -MF $(DEPDIR)/test-vector_is_unit.Tpo -c -o test-vector_is_unit.o `test -f 'vector_is_unit.cpp' || echo '$(srcdir)/'`vector_is_unit.cpp
	mv -f $(DEPDIR)/test-vector_is_unit.Tpo $(DEPDIR)/test-vector_is_unit.Po
#	source='vector_is_unit.cpp' object='test-vector_is_unit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_is_unit.o `test -f 'vector_is_unit.cpp' || echo '$(srcdir)/'`vector_is_unit.cpp

test-vector_is_unit.obj: vector_is_unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_is_unit.obj -MD -MP -MF $(DEPDIR)/test-vector_is_unit.Tpo -c -o test-vector_is_unit.obj `if test -f 'vector_is_unit.cpp'; then $(CYGPATH_W) 'vector_is_unit.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_is_unit.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_is_unit.Tpo $(DEPDIR)/test-vector_is_unit.Po
#	source='vector_is_unit.cpp' object='test-vector_is_unit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_is_unit.obj `if test -f 'vector_is_unit.cpp'; then $(CYGPATH_W) 'vector_is_unit.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_is_unit.cpp'; fi`

test-vector_matrix_init.o: vector_matrix_init.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_matrix_init.o -MD -MP -MF $(DEPDIR)/test-vector_matrix_init.Tpo -c -o test-vector_matrix_init.o `test -f 'vector_matrix_init.cpp' || echo '$(srcdir)/'`vector_matrix_init.cpp
	mv -f $(DEPDIR)/test-vector_matrix_init.Tpo $(DEPDIR)/test-vector_matrix_init.Po
#	source='vector_matrix_init.cpp' object='test-vector_matrix_init.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_matrix_init.o `test -f 'vector_matrix_init.cpp' || echo '$(srcdir)/'`vector_matrix_init.cpp

test-vector_matrix_init.obj: vector_matrix_init.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_matrix_init.obj -MD -MP -MF $(DEPDIR)/test-vector_matrix_init.Tpo -c -o test-vector_matrix_init.obj `if test -f 'vector_matrix_init.cpp'; then $(CYGPATH_W) 'vector_matrix_init.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_matrix_init.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_matrix_init.Tpo $(DEPDIR)/test-vector_matrix_init.Po
#	source='vector_matrix_init.cpp' object='test-vector_matrix_init.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_matrix_init.obj `if test -f 'vector_matrix_init.cpp'; then $(CYGPATH_W) 'vector_matrix_init.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_matrix_init.cpp'; fi`

test-vector_mix_comp.o: vector_mix_comp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_mix_comp.o -MD -MP -MF $(DEPDIR)/test-vector_mix_comp.Tpo -c -o test-vector_mix_comp.o `test -f 'vector_mix_comp.cpp' || echo '$(srcdir)/'`vector_mix_comp.cpp
	mv -f $(DEPDIR)/test-vector_mix_comp.Tpo $(DEPDIR)/test-vector_mix_comp.Po
#	source='vector_mix_comp.cpp' object='test-vector_mix_comp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_mix_comp.o `test -f 'vector_mix_comp.cpp' || echo '$(srcdir)/'`vector_mix_comp.cpp

test-vector_mix_comp.obj: vector_mix_comp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_mix_comp.obj -MD -MP -MF $(DEPDIR)/test-vector_mix_comp.Tpo -c -o test-vector_mix_comp.obj `if test -f 'vector_mix_comp.cpp'; then $(CYGPATH_W) 'vector_mix_comp.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_mix_comp.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_mix_comp.Tpo $(DEPDIR)/test-vector_mix_comp.Po
#	source='vector_mix_comp.cpp' object='test-vector_mix_comp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_mix_comp.obj `if test -f 'vector_mix_comp.cpp'; then $(CYGPATH_W) 'vector_mix_comp.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_mix_comp.cpp'; fi`

test-vector_mul_div.o: vector_mul_div.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_mul_div.o -MD -MP -MF $(DEPDIR)/test-vector_mul_div.Tpo -c -o test-vector_mul_div.o `test -f 'vector_mul_div.cpp' || echo '$(srcdir)/'`vector_mul_div.cpp
	mv -f $(DEPDIR)/test-vector_mul_div.Tpo $(DEPDIR)/test-vector_mul_div.Po
#	source='vector_mul_div.cpp' object='test-vector_mul_div.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_mul_div.o `test -f 'vector_mul_div.cpp' || echo '$(srcdir)/'`vector_mul_div.cpp

test-vector_mul_div.obj: vector_mul_div.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_mul_div.obj -MD -MP -MF $(DEPDIR)/test-vector_mul_div.Tpo -c -o test-vector_mul_div.obj `if test -f 'vector_mul_div.cpp'; then $(CYGPATH_W) 'vector_mul_div.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_mul_div.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_mul_div.Tpo $(DEPDIR)/test-vector_mul_div.Po
#	source='vector_mul_div.cpp' object='test-vector_mul_div.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_mul_div.obj `if test -f 'vector_mul_div.cpp'; then $(CYGPATH_W) 'vector_mul_div.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_mul_div.cpp'; fi`

test-vector_opposite.o: vector_opposite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_opposite.o -MD -MP -MF $(DEPDIR)/test-vector_opposite.Tpo -c -o test-vector_opposite.o `test -f 'vector_opposite.cpp' || echo '$(srcdir)/'`vector_opposite.cpp
	mv -f $(DEPDIR)/test-vector_opposite.Tpo $(DEPDIR)/test-vector_opposite.Po
#	source='vector_opposite.cpp' object='test-vector_opposite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_opposite.o `test -f 'vector_opposite.cpp' || echo '$(srcdir)/'`vector_opposite.cpp

test-vector_opposite.obj: vector_opposite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_opposite.obj -MD -MP -MF $(DEPDIR)/test-vector_opposite.Tpo -c -o test-vector_opposite.obj `if test -f 'vector_opposite.cpp'; then $(CYGPATH_W) 'vector_opposite.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_opposite.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_opposite.Tpo $(DEPDIR)/test-vector_opposite.Po
#	source='vector_opposite.cpp' object='test-vector_opposite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_opposite.obj `if test -f 'vector_opposite.cpp'; then $(CYGPATH_W) 'vector_opposite.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_opposite.cpp'; fi`

test-vector_plus_minus.o: vector_plus_minus.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_plus_minus.o -MD -MP -MF $(DEPDIR)/test-vector_plus_minus.Tpo -c -o test-vector_plus_minus.o `test -f 'vector_plus_minus.cpp' || echo '$(srcdir)/'`vector_plus_minus.cpp
	mv -f $(DEPDIR)/test-vector_plus_minus.Tpo $(DEPDIR)/test-vector_plus_minus.Po
#	source='vector_plus_minus.cpp' object='test-vector_plus_minus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_plus_minus.o `test -f 'vector_plus_minus.cpp' || echo '$(srcdir)/'`vector_plus_minus.cpp

test-vector_plus_minus.obj: vector_plus_minus.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_plus_minus.obj -MD -MP -MF $(DEPDIR)/test-vector_plus_minus.Tpo -c -o test-vector_plus_minus.obj `if test -f 'vector_plus_minus.cpp'; then $(CYGPATH_W) 'vector_plus_minus.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_plus_minus.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_plus_minus.Tpo $(DEPDIR)/test-vector_plus_minus.Po
#	source='vector_plus_minus.cpp' object='test-vector_plus_minus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_plus_minus.obj `if test -f 'vector_plus_minus.cpp'; then $(CYGPATH_W) 'vector_plus_minus.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_plus_minus.cpp'; fi`

test-vector_swap.o: vector_swap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_swap.o -MD -MP -MF $(DEPDIR)/test-vector_swap.Tpo -c -o test-vector_swap.o `test -f 'vector_swap.cpp' || echo '$(srcdir)/'`vector_swap.cpp
	mv -f $(DEPDIR)/test-vector_swap.Tpo $(DEPDIR)/test-vector_swap.Po
#	source='vector_swap.cpp' object='test-vector_swap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_swap.o `test -f 'vector_swap.cpp' || echo '$(srcdir)/'`vector_swap.cpp

test-vector_swap.obj: vector_swap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_swap.obj -MD -MP -MF $(DEPDIR)/test-vector_swap.Tpo -c -o test-vector_swap.obj `if test -f 'vector_swap.cpp'; then $(CYGPATH_W) 'vector_swap.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_swap.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_swap.Tpo $(DEPDIR)/test-vector_swap.Po
#	source='vector_swap.cpp' object='test-vector_swap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_swap.obj `if test -f 'vector_swap.cpp'; then $(CYGPATH_W) 'vector_swap.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_swap.cpp'; fi`

test-vector_take_subvector.o: vector_take_subvector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_take_subvector.o -MD -MP -MF $(DEPDIR)/test-vector_take_subvector.Tpo -c -o test-vector_take_subvector.o `test -f 'vector_take_subvector.cpp' || echo '$(srcdir)/'`vector_take_subvector.cpp
	mv -f $(DEPDIR)/test-vector_take_subvector.Tpo $(DEPDIR)/test-vector_take_subvector.Po
#	source='vector_take_subvector.cpp' object='test-vector_take_subvector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_take_subvector.o `test -f 'vector_take_subvector.cpp' || echo '$(srcdir)/'`vector_take_subvector.cpp

test-vector_take_subvector.obj: vector_take_subvector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-vector_take_subvector.obj -MD -MP -MF $(DEPDIR)/test-vector_take_subvector.Tpo -c -o test-vector_take_subvector.obj `if test -f 'vector_take_subvector.cpp'; then $(CYGPATH_W) 'vector_take_subvector.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_take_subvector.cpp'; fi`
	mv -f $(DEPDIR)/test-vector_take_subvector.Tpo $(DEPDIR)/test-vector_take_subvector.Po
#	source='vector_take_subvector.cpp' object='test-vector_take_subvector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-vector_take_subvector.obj `if test -f 'vector_take_subvector.cpp'; then $(CYGPATH_W) 'vector_take_subvector.cpp'; else $(CYGPATH_W) '$(srcdir)/vector_take_subvector.cpp'; fi`

test-winograd.o: winograd.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-winograd.o -MD -MP -MF $(DEPDIR)/test-winograd.Tpo -c -o test-winograd.o `test -f 'winograd.cpp' || echo '$(srcdir)/'`winograd.cpp
	mv -f $(DEPDIR)/test-winograd.Tpo $(DEPDIR)/test-winograd.Po
#	source='winograd.cpp' object='test-winograd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-winograd.o `test -f 'winograd.cpp' || echo '$(srcdir)/'`winograd.cpp

test-winograd.obj: winograd.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -MT test-winograd.obj -MD -MP -MF $(DEPDIR)/test-winograd.Tpo -c -o test-winograd.obj `if test -f 'winograd.cpp'; then $(CYGPATH_W) 'winograd.cpp'; else $(CYGPATH_W) '$(srcdir)/winograd.cpp'; fi`
	mv -f $(DEPDIR)/test-winograd.Tpo $(DEPDIR)/test-winograd.Po
#	source='winograd.cpp' object='test-winograd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_CXXFLAGS) $(CXXFLAGS) -c -o test-winograd.obj `if test -f 'winograd.cpp'; then $(CYGPATH_W) 'winograd.cpp'; else $(CYGPATH_W) '$(srcdir)/winograd.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean \
	clean-checkPROGRAMS clean-generic ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am


stdafx.hpp.gch: stdafx.hpp
	$(CC) -x c++-header $(test_CXXFLAGS) -o $@ $<
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
